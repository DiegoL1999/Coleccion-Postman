{
	"info": {
		"_postman_id": "73645b46-5145-41cc-bd20-0c1557a4b94f",
		"name": "Coleccion General",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20799944"
	},
	"item": [
		{
			"name": "Funcionarios",
			"item": [
				{
					"name": "Obtener funcionarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de funcionarios obtenida con exito\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de funcionarios obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdSstFuncionario: { type: \"number\"},\r",
									"        Idusuario: { type: \"number\"},\r",
									"       ScoringSarlaft: { \r",
									"           oneOff: [\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]\r",
									"       },\r",
									"       NomSstFuncionario: {\r",
									"           oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]\r",
									"        },\r",
									"        segNombre: {  \r",
									"            oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        PrimerApellido: {  \r",
									"            oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        SegApellido: {  \r",
									"            oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        CodTipoDocIdentidad: { type: \"number\"},\r",
									"        NumIdentificacion: { \r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        FechaNac: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"        LovSexo: { type: \"string\"},\r",
									"        Direccion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        Telefono: { \r",
									"            oneOff: [\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        CodDepartamento: { type: \"number\"},\r",
									"        Departamento: { type: \"string\"},\r",
									"        CodCiudad: { type: \"number\"},\r",
									"        Ciudad: { type: \"string\"},\r",
									"        LovZona: { type: \"string\"},\r",
									"        CodCiudad: { type: \"number\"},\r",
									"        Cargo: { type: \"string\"},\r",
									"        FechaIngreso: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"        LovZona: { type: \"string\"},\r",
									"        LovTipoVinculacion: { type: \"string\"},\r",
									"        LovEps: { type: \"string\"},\r",
									"        LovAfp: { type: \"string\"},\r",
									"        EsNivelGlobal: { \r",
									"            oneOff: [\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]\r",
									"        },\r",
									"        LovArl: { type: \"string\"},\r",
									"        Vigencia: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        Activo: { type: \"boolean\"},\r",
									"        HorasTrabajoxSemana: { \r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"               \r",
									"            ]},\r",
									"        Email: { \r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            \r",
									"            ]},\r",
									"        NombreCompleto: {\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            \r",
									"            ]}, \r",
									"        UserSstFacil: {\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            \r",
									"            ]},\r",
									"        EsSSTFacil: { \r",
									"            oneOff: [\r",
									"                { type: \"boolean\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        EsProductoSSTFacil: {\r",
									"            oneOff: [\r",
									"                { type: \"boolean\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CrearUsuario: {\r",
									"            oneOff: [\r",
									"                { type: \"boolean\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodSSTidRequisitoCriterio: {\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodIdioma: {\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodSeccional:{\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        OrigenRecursos:{\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        ActividadEconomica:{\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        SLFCanal:{\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodOrigenRecursos:{\r",
									"               oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodActividadEconomica:{\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]}, \r",
									"        CodSLFCanal:{\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodArea:{\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]}, \r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdSstFuncionario',\r",
									"        'Idusuario',\r",
									"        'ScoringSarlaft', \r",
									"        'NomSstFuncionario', \r",
									"        'SegNombre',\r",
									"        'PrimerApellido',\r",
									"        'SegApellido',\r",
									"        'CodTipoDocIdentidad',\r",
									"        'NumIdentificacion',\r",
									"        'FechaNac',\r",
									"        'LovSexo',\r",
									"        'Direccion',\r",
									"        'Telefono',\r",
									"        'CodDepartamento',\r",
									"        'Departamento',\r",
									"        'CodCiudad',\r",
									"        'Ciudad',\r",
									"        'LovZona',\r",
									"        'CodCargo',\r",
									"        'Cargo',\r",
									"        'FechaIngreso',\r",
									"        'LovJornada',\r",
									"        'LovTipoVinculacion',\r",
									"        'LovEps',\r",
									"        'LovAfp',\r",
									"        'EsNivelGlobal',\r",
									"        'LovArl',\r",
									"        'Vigencia',\r",
									"        'Activo',\r",
									"        'HorasTrabajoxSemana',\r",
									"        'Email',\r",
									"        'NombreCompleto',\r",
									"        'UserSstFacil',\r",
									"        'EsProductoSSTFacil',\r",
									"        'CrearUsuario',\r",
									"        'CodSSTidRequisitoCriterio',\r",
									"        'CodSeccional',\r",
									"        'OrigenRecursos',\r",
									"        'ActividadEconomica',\r",
									"        'SLFCanal',\r",
									"        'CodOrigenRecursos',\r",
									"        'CodActividadEconomica',\r",
									"        'CodSLFCanal',\r",
									"        'CodArea' ,\r",
									"        'Sucursales'\r",
									"    ]}\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/funcionarios/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"funcionarios",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener de Paginación para Funcionarios (0 a 20)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Server Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de funcionarios obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdSstFuncionario: { type: \"number\"},\r",
									"        Idusuario: { type: \"number\"},\r",
									"       ScoringSarlaft: { \r",
									"           oneOff: [\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]\r",
									"       },\r",
									"       NomSstFuncionario: {\r",
									"           oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]\r",
									"        },\r",
									"        segNombre: {  \r",
									"            oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        PrimerApellido: {  \r",
									"            oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        SegApellido: {  \r",
									"            oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        CodTipoDocIdentidad: { type: \"number\"},\r",
									"        NumIdentificacion: { \r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        FechaNac: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"        LovSexo: { type: \"string\"},\r",
									"        Direccion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        Telefono: { \r",
									"            oneOff: [\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        CodDepartamento: { type: \"number\"},\r",
									"        Departamento: { type: \"string\"},\r",
									"        CodCiudad: { type: \"number\"},\r",
									"        Ciudad: { type: \"string\"},\r",
									"        LovZona: { type: \"string\"},\r",
									"        CodCiudad: { type: \"number\"},\r",
									"        Cargo: { type: \"string\"},\r",
									"        FechaIngreso: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"        LovZona: { type: \"string\"},\r",
									"        LovTipoVinculacion: { type: \"string\"},\r",
									"        LovEps: { type: \"string\"},\r",
									"        LovAfp: { type: \"string\"},\r",
									"        EsNivelGlobal: { \r",
									"            oneOff: [\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]\r",
									"        },\r",
									"        LovArl: { type: \"string\"},\r",
									"        Vigencia: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        Activo: { type: \"boolean\"},\r",
									"        HorasTrabajoxSemana: { \r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        Email: { \r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            \r",
									"            ]},\r",
									"        NombreCompleto: {\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            \r",
									"            ]}, \r",
									"        UserSstFacil: {\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            \r",
									"            ]},\r",
									"        EsSSTFacil: { \r",
									"            oneOff: [\r",
									"                { type: \"boolean\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        EsProductoSSTFacil: {\r",
									"            oneOff: [\r",
									"                { type: \"boolean\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CrearUsuario: {\r",
									"            oneOff: [\r",
									"                { type: \"boolean\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodSSTidRequisitoCriterio: {\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodIdioma: {\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodSeccional:{\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        OrigenRecursos:{\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        ActividadEconomica:{\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        SLFCanal:{\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodOrigenRecursos:{\r",
									"               oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodActividadEconomica:{\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]}, \r",
									"        CodSLFCanal:{\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodArea:{\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]}, \r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdSstFuncionario',\r",
									"        'Idusuario',\r",
									"        'ScoringSarlaft', \r",
									"        'NomSstFuncionario', \r",
									"        'SegNombre',\r",
									"        'PrimerApellido',\r",
									"        'SegApellido',\r",
									"        'CodTipoDocIdentidad',\r",
									"        'NumIdentificacion',\r",
									"        'FechaNac',\r",
									"        'LovSexo',\r",
									"        'Direccion',\r",
									"        'Telefono',\r",
									"        'CodDepartamento',\r",
									"        'Departamento',\r",
									"        'CodCiudad',\r",
									"        'Ciudad',\r",
									"        'LovZona',\r",
									"        'CodCargo',\r",
									"        'Cargo',\r",
									"        'FechaIngreso',\r",
									"        'LovJornada',\r",
									"        'LovTipoVinculacion',\r",
									"        'LovEps',\r",
									"        'LovAfp',\r",
									"        'EsNivelGlobal',\r",
									"        'LovArl',\r",
									"        'Vigencia',\r",
									"        'Activo',\r",
									"        'HorasTrabajoxSemana',\r",
									"        'Email',\r",
									"        'NombreCompleto',\r",
									"        'UserSstFacil',\r",
									"        'EsProductoSSTFacil',\r",
									"        'CrearUsuario',\r",
									"        'CodSSTidRequisitoCriterio',\r",
									"        'CodSeccional',\r",
									"        'OrigenRecursos',\r",
									"        'ActividadEconomica',\r",
									"        'SLFCanal',\r",
									"        'CodOrigenRecursos',\r",
									"        'CodActividadEconomica',\r",
									"        'CodSLFCanal',\r",
									"        'CodArea' ,\r",
									"        'Sucursales'\r",
									"    ]}\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/funcionarios?RegistroActual=0&TamanoPagina=20",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"funcionarios"
							],
							"query": [
								{
									"key": "RegistroActual",
									"value": "0"
								},
								{
									"key": "TamanoPagina",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener de Paginación para Funcionarios (21 a 100)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Server Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de funcionarios obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdSstFuncionario: { type: \"number\"},\r",
									"        Idusuario: { type: \"number\"},\r",
									"       ScoringSarlaft: { \r",
									"           oneOff: [\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]\r",
									"       },\r",
									"       NomSstFuncionario: {\r",
									"           oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]\r",
									"        },\r",
									"        segNombre: {  \r",
									"            oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        PrimerApellido: {  \r",
									"            oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        SegApellido: {  \r",
									"            oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        CodTipoDocIdentidad: { type: \"number\"},\r",
									"        NumIdentificacion: { \r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        FechaNac: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"        LovSexo: { type: \"string\"},\r",
									"        Direccion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\"},\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        Telefono: { \r",
									"            oneOff: [\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]},\r",
									"        CodDepartamento: { type: \"number\"},\r",
									"        Departamento: { type: \"string\"},\r",
									"        CodCiudad: { type: \"number\"},\r",
									"        Ciudad: { type: \"string\"},\r",
									"        LovZona: { type: \"string\"},\r",
									"        CodCiudad: { type: \"number\"},\r",
									"        Cargo: { type: \"string\"},\r",
									"        FechaIngreso: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"        LovZona: { type: \"string\"},\r",
									"        LovTipoVinculacion: { type: \"string\"},\r",
									"        LovEps: { type: \"string\"},\r",
									"        LovAfp: { type: \"string\"},\r",
									"        EsNivelGlobal: { \r",
									"            oneOff: [\r",
									"               { type: \"number\"},\r",
									"               { type: \"null\"}\r",
									"           ]\r",
									"        },\r",
									"        LovArl: { type: \"string\"},\r",
									"        Vigencia: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        Activo: { type: \"boolean\"},\r",
									"        HorasTrabajoxSemana: { \r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        Email: { \r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            \r",
									"            ]},\r",
									"        NombreCompleto: {\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            \r",
									"            ]}, \r",
									"        UserSstFacil: {\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            \r",
									"            ]},\r",
									"        EsSSTFacil: { \r",
									"            oneOff: [\r",
									"                { type: \"boolean\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        EsProductoSSTFacil: {\r",
									"            oneOff: [\r",
									"                { type: \"boolean\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CrearUsuario: {\r",
									"            oneOff: [\r",
									"                { type: \"boolean\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodSSTidRequisitoCriterio: {\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodIdioma: {\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodSeccional:{\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        OrigenRecursos:{\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        ActividadEconomica:{\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        SLFCanal:{\r",
									"            oneOff: [\r",
									"                { type: \"string\"},\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodOrigenRecursos:{\r",
									"               oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodActividadEconomica:{\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]}, \r",
									"        CodSLFCanal:{\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodArea:{\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]}, \r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdSstFuncionario',\r",
									"        'Idusuario',\r",
									"        'ScoringSarlaft', \r",
									"        'NomSstFuncionario', \r",
									"        'SegNombre',\r",
									"        'PrimerApellido',\r",
									"        'SegApellido',\r",
									"        'CodTipoDocIdentidad',\r",
									"        'NumIdentificacion',\r",
									"        'FechaNac',\r",
									"        'LovSexo',\r",
									"        'Direccion',\r",
									"        'Telefono',\r",
									"        'CodDepartamento',\r",
									"        'Departamento',\r",
									"        'CodCiudad',\r",
									"        'Ciudad',\r",
									"        'LovZona',\r",
									"        'CodCargo',\r",
									"        'Cargo',\r",
									"        'FechaIngreso',\r",
									"        'LovJornada',\r",
									"        'LovTipoVinculacion',\r",
									"        'LovEps',\r",
									"        'LovAfp',\r",
									"        'EsNivelGlobal',\r",
									"        'LovArl',\r",
									"        'Vigencia',\r",
									"        'Activo',\r",
									"        'HorasTrabajoxSemana',\r",
									"        'Email',\r",
									"        'NombreCompleto',\r",
									"        'UserSstFacil',\r",
									"        'EsProductoSSTFacil',\r",
									"        'CrearUsuario',\r",
									"        'CodSSTidRequisitoCriterio',\r",
									"        'CodSeccional',\r",
									"        'OrigenRecursos',\r",
									"        'ActividadEconomica',\r",
									"        'SLFCanal',\r",
									"        'CodOrigenRecursos',\r",
									"        'CodActividadEconomica',\r",
									"        'CodSLFCanal',\r",
									"        'CodArea' ,\r",
									"        'Sucursales'\r",
									"    ]}\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/funcionarios?RegistroActual=21&TamanoPagina=100",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"funcionarios"
							],
							"query": [
								{
									"key": "RegistroActual",
									"value": "21"
								},
								{
									"key": "TamanoPagina",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un funcionario",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"Nombre\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.globals.set(\"NumeroIdentificacion\", pm.variables.replaceIn('{{$randomBankAccount}}'));\r",
									"pm.globals.set(\"Login\",pm.variables.replaceIn('{{Nombre}}'+'.'+'{{NumeroIdentificacion}}'));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"funcionario creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Usuario creado\")\r",
									"})\r",
									"\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        TipoIdentificacion: { type: \"string\"},\r",
									"        NumeroIdentificacion: {\r",
									"            oneOff: [ \r",
									"                {type: \"number\"},\r",
									"                {type: \"null\"}\r",
									"        ]},\r",
									"        Login: {\r",
									"            oneOff: [\r",
									"                {type: \"string\"},\r",
									"                {type: \"null\"},\r",
									"                {type: \"number\"}\r",
									"            ]\r",
									"        },\r",
									"        Nombre: {\r",
									"            oneOff: [\r",
									"                {type: \"string\"},\r",
									"                {type: \"null\"},\r",
									"                {type: \"number\"}\r",
									"            ]\r",
									"        },\r",
									"        Correo: {\r",
									"            oneOff: [\r",
									"                {type: \"string\"},\r",
									"                {type: \"null\"},\r",
									"                {type: \"number\"}\r",
									"            ]\r",
									"        },\r",
									"        FechaNacimiento: {\r",
									"            oneOff: [\r",
									"                { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"            ]\r",
									"        },\r",
									"        Genero: {\r",
									"            type: \"string\"\r",
									"        },\r",
									"        Departamento: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        Ciudad: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        Zona: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        Cargo: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        FechaIngreso:  {\r",
									"            oneOff: [\r",
									"                { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"            ]\r",
									"        },\r",
									"        Jornada: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        TipoVinculacion: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        EPS: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        Afp: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        Arl: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        Activo: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"Boleean\"}\r",
									"            ]\r",
									"        },\r",
									"        Direccion: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"},\r",
									"              {type: \"number\"}\r",
									"            ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"number\"}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"number\"}\r",
									"            ]},\r",
									"        CodOrigenRecursos:  {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"number\"}\r",
									"            ]},\r",
									"        CodSLFCanal:  {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"number\"}\r",
									"            ]},\r",
									"        CodArea:  {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"number\"}\r",
									"            ]},\r",
									"        EsNivelGlobal: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"Boleean\"}\r",
									"            ]},\r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"'TipoIdentificacion',\r",
									"'NumeroIdentificacion',\r",
									"'Login',\r",
									"'Nombre',\r",
									"'Correo',\r",
									"'FechaNacimiento',\r",
									"'Genero',\r",
									"'Departamento',\r",
									"'Ciudad',\r",
									"'Zona',\r",
									"'Cargo',\r",
									"'FechaIngreso',\r",
									"'Jornada',\r",
									"'TipoVinculacion',\r",
									"'Eps',\r",
									"'Afp',\r",
									"'Arl',\r",
									"'Activo',\r",
									"'Direccion',\r",
									"'Telefono',\r",
									"'CodActividadEconomica',\r",
									"'CodOrigenRecursos',\r",
									"'CodSLFCanal',\r",
									"'CodArea',\r",
									"'EsNivelGlobal',\r",
									"'Sucursales'\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"TipoIdentificacion\": \"Pasaporte\",\r\n  \"NumeroIdentificacion\": \"{{NumeroIdentificacion}}\",\r\n  \"Nombre\": \"{{Nombre}}\",\r\n  \"Login\": \"{{Login}}\",\r\n  \"Correo\": \"email@compania.com\",\r\n  \"FechaNacimiento\": \"2000-01-01T13:50:23\",\r\n  \"Genero\": \"Masculino\",\r\n  \"Departamento\": \"BOGOTÁ D.C.\",\r\n  \"Ciudad\": \"BOGOTÁ D.C.\",\r\n  \"Zona\": \"Urbana\",\r\n  \"Cargo\": \"Ninguno\",\r\n  \"FechaIngreso\": \"2022-09-13T13:50:55\",\r\n  \"Jornada\": \"Normal\",\r\n  \"TipoVinculacion\": \"Laboral\",\r\n  \"Eps\": \"A.I.C.\",\r\n  \"Afp\": \"Caxdac\",\r\n  \"Arl\": \"Alfa\",\r\n  \"Activo\": \"1\",\r\n  \"Direccion\": \"Calle falsa 12345\",\r\n  \"Telefono\": \"23323232\",\r\n  \"CodActividadEconomica\":2,\r\n  \"CodOrigenRecursos\":2,\r\n  \"CodSLFCanal\":17,\r\n  \"CodArea\": 1,\r\n  \"EsNivelGlobal\":0,\r\n  \"Sucursales\":\"1,2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/funcionarios/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"funcionarios",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar funcionario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"funcionario editado correctamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Funcionario actualizado\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        TipoIdentificacion: { type: \"string\"},\r",
									"        NumeroIdentificacion: {\r",
									"            oneOff: [ \r",
									"                {type: \"number\"},\r",
									"                {type: \"null\"}\r",
									"        ]},\r",
									"        Login: {\r",
									"            oneOff: [\r",
									"                {type: \"string\"},\r",
									"                {type: \"null\"},\r",
									"                {type: \"number\"}\r",
									"            ]\r",
									"        },\r",
									"        Nombre: {\r",
									"            oneOff: [\r",
									"                {type: \"string\"},\r",
									"                {type: \"null\"},\r",
									"                {type: \"number\"}\r",
									"            ]\r",
									"        },\r",
									"        Correo: {\r",
									"            oneOff: [\r",
									"                {type: \"string\"},\r",
									"                {type: \"null\"},\r",
									"                {type: \"number\"}\r",
									"            ]\r",
									"        },\r",
									"        FechaNacimiento: {\r",
									"            oneOff: [\r",
									"                { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"            ]\r",
									"        },\r",
									"        Genero: {\r",
									"            type: \"string\"\r",
									"        },\r",
									"        Departamento: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        Ciudad: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        Zona: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        Cargo: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        FechaIngreso:  {\r",
									"            oneOff: [\r",
									"                { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"            ]\r",
									"        },\r",
									"        Jornada: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        TipoVinculacion: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        EPS: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        Afp: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        Arl: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"}\r",
									"            ]},\r",
									"        Activo: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"Boleean\"}\r",
									"            ]\r",
									"        },\r",
									"        Direccion: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"string\"},\r",
									"              {type: \"number\"}\r",
									"            ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"number\"}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"number\"}\r",
									"            ]},\r",
									"        CodOrigenRecursos:  {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"number\"}\r",
									"            ]},\r",
									"        CodSLFCanal:  {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"number\"}\r",
									"            ]},\r",
									"        CodArea:  {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"number\"}\r",
									"            ]},\r",
									"        EsNivelGlobal: {\r",
									"            oneOff: [\r",
									"              {type: \"null\"},\r",
									"              {type: \"Boleean\"}\r",
									"            ]},\r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: \"number\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"'TipoIdentificacion',\r",
									"'NumeroIdentificacion',\r",
									"'Login',\r",
									"'Nombre',\r",
									"'Correo',\r",
									"'FechaNacimiento',\r",
									"'Genero',\r",
									"'Departamento',\r",
									"'Ciudad',\r",
									"'Zona',\r",
									"'Cargo',\r",
									"'FechaIngreso',\r",
									"'Jornada',\r",
									"'TipoVinculacion',\r",
									"'Eps',\r",
									"'Afp',\r",
									"'Arl',\r",
									"'Activo',\r",
									"'Direccion',\r",
									"'Telefono',\r",
									"'CodActividadEconomica',\r",
									"'CodOrigenRecursos',\r",
									"'CodSLFCanal',\r",
									"'CodArea',\r",
									"'EsNivelGlobal',\r",
									"'Sucursales'\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"Correo\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"pm.globals.set(\"Nombre\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.globals.set(\"Login\",pm.variables.replaceIn('{{Nombre}}'+'.'+'{{NumeroIdentificacion}}'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apikey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"TipoIdentificacion\": \"Pasaporte\",\r\n  \"NumeroIdentificacion\": \"{{NumeroIdentificacion}}\",\r\n  \"Nombre\": \"{{Nombre}}\",\r\n  \"Login\": \"{{Login}}\",\r\n  \"Correo\": \"{{Correo}}\",\r\n  \"FechaNacimiento\": \"2000-01-01T13:50:23\",\r\n  \"Genero\": \"Masculino\",\r\n  \"Departamento\": \"BOGOTÁ D.C.\",\r\n  \"Ciudad\": \"BOGOTÁ D.C.\",\r\n  \"Zona\": \"Urbana\",\r\n  \"Cargo\": \"Ninguno\",\r\n  \"FechaIngreso\": \"2022-09-13T13:50:55\",\r\n  \"Jornada\": \"Normal\",\r\n  \"TipoVinculacion\": \"Laboral\",\r\n  \"Eps\": \"A.I.C.\",\r\n  \"Afp\": \"Caxdac\",\r\n  \"Arl\": \"Alfa\",\r\n  \"Activo\": \"1\",\r\n  \"Direccion\": \"Calle falsa 12345\",\r\n  \"Telefono\": \"23323232\",\r\n  \"CodActividadEconomica\":2,\r\n  \"CodOrigenRecursos\":2,\r\n  \"CodSLFCanal\":17,\r\n  \"CodArea\": 1,\r\n  \"EsNivelGlobal\":0,\r\n  \"Sucursales\":\"1,2\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/funcionarios/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"funcionarios",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Relacionar tercero a un funcionario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tercero asociado a funcionario con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Tercero relacionado agregado correctamente\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdTercero: { type: 'number'},\r",
									"        Porcentaje: { type: 'number'},\r",
									"        TipoRelacion: { type: 'number'},\r",
									"    additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdTercero',\r",
									"        'Porcentaje',\r",
									"        'TipoRelacion'\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const postId1 = Math.floor((Math.random() *100)+1);\r",
									"\r",
									"pm.globals.set('postId1', postId1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"IdTercero\": 2,\r\n    \"Porcentaje\": 30,\r\n    \"TipoRelacion\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/funcionarios/1711/Tercero",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"funcionarios",
								"1711",
								"Tercero"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar funcionario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tercero eliminado de funcionario correctamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Tercero relacionado agregado correctamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_Tercero: { type: 'number'},\r",
									"        NomTercero: { \r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'}\r",
									"            ]},\r",
									"        CodTipoidentificacion: { type: 'number'},\r",
									"        NumDocumento:{ type: 'number'},\r",
									"        Telefono:{\r",
									"            oneOff: [\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneOff:[\r",
									"                {type: 'string'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        CodTipoDeRelacion: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        CodTipoPersona: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Activo: {\r",
									"            oneOff: [\r",
									"                {type: 'boleean'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"    additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"       'Id_Tercero',\r",
									"       'NomTercero',\r",
									"       'CodTipoidentificacion',\r",
									"       'NumDocumento',\r",
									"       'Telefono',\r",
									"       'Email',\r",
									"       'CodTipoDeRelacion',\r",
									"       'CodTipoPersona',\r",
									"       'Porcentaje',\r",
									"       'Activo'\r",
									"    ]}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/funcionarios/1711/Tercero/2/TipoRelacion/3",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"funcionarios",
								"1711",
								"Tercero",
								"2",
								"TipoRelacion",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Furel",
			"item": [
				{
					"name": "Buscar un Furel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de Furel traida con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json();\r",
									"\r",
									"pm.test(\"El mensaje ha sido validado con éxito\",()=>{\r",
									"    pm.expect(jsonBody.Message).to.equals(\"Lista de Enfermedad Laboral obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: \"array\",\r",
									"    items:  {\r",
									"        properties: {\r",
									"            NombreFuncionario: { \"type\": \"string\"},\r",
									"            FechaAccidente: { \r",
									"                oneOff: [\r",
									"                    { \"type\": \"string\",                   \r",
									"                    \"format\": \"data-time\",                   \r",
									"                    \"pattern\": \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"                \r",
									"                    },\r",
									"                    { type: \"intenger\"}\r",
									"                ]},\r",
									"            Municipiodelaenfermedad: { \"type\": \"string\"},\r",
									"            CodActividadEconomicaPersona: { \"type\": \"integer\"},\r",
									"            CausoMuerte: { \"type\": \"integer\"},\r",
									"            Hora: { \"type\": \"integer\"},\r",
									"            Minuto: { \"type\": \"integer\"},\r",
									"            HoraLaborada: { \"type\": \"integer\"},\r",
									"            MinutoLaborado: { \"type\": \"integer\"},\r",
									"            LaborHabitual: { \"type\": \"integer\"},\r",
									"            MecanismoOtro: { \"type\": \"string\"},\r",
									"            DescripcionAccidente: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"string\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            FuncionarioSalario: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"integer\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            OcupacionActualNumeroDias: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"integer\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            OtraLabor: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"string\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            PresenciaronAccidente: { type: \"integer\"},\r",
									"            SitioAccidenteOtro: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"string\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            additionalProperties: false\r",
									"            },\r",
									"        required: [\r",
									"            'NombreFuncionario',\r",
									"            'FechaAccidente',\r",
									"            'Municipiodelaenfermedad',\r",
									"            'CodActividadEconomicaPersona',\r",
									"            'CausoMuerte',\r",
									"            'Hora',\r",
									"            'Minuto',\r",
									"            'HoraLaborada',\r",
									"            'MinutoLaborado',\r",
									"            'LaborHabitual',\r",
									"            'MecanismoOtro',\r",
									"            'DescripcionAccidente',\r",
									"            'FuncionarioSalario',\r",
									"            'OcupacionActualNumeroDias',\r",
									"            'OtraLabor',\r",
									"            'PresenciaronAccidente',\r",
									"            'SitioAccidenteOtro'\r",
									"            ]\r",
									"        }    \r",
									"    }\r",
									"\r",
									"pm.test(\"La respuesta coincide con el esquema\",()=>{\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "{{apiKey}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/furel/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"furel",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un Furel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El Furel a sido creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json();\r",
									"\r",
									"pm.test(\"El mensaje ha sido validado con éxito\",()=>{\r",
									"    pm.expect(jsonBody.Message).to.equals(\"El registro de Enfermedad Laboral ha sido creado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: \"object\",\r",
									"    items:  {\r",
									"        properties: {\r",
									"            NombreFuncionario: { \"type\": \"string\"},\r",
									"            FechaAccidente: { \r",
									"                oneOff: [\r",
									"                    { \"type\": \"string\",                   \r",
									"                    \"format\": \"data-time\",                   \r",
									"                    \"pattern\": \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"                \r",
									"                    },\r",
									"                    { type: \"intenger\"}\r",
									"                ]},\r",
									"            Municipiodelaenfermedad: { \"type\": \"string\"},\r",
									"            CodActividadEconomicaPersona: { \"type\": \"integer\"},\r",
									"            CausoMuerte: { \"type\": \"integer\"},\r",
									"            HoraAccidente: { \"type\": \"integer\"},\r",
									"            Minuto: { \"type\": \"integer\"},\r",
									"            Horalaborada: { \"type\": \"integer\"},\r",
									"            MinutoLaborado: { \"type\": \"integer\"},\r",
									"            LaborHabitual: { \"type\": \"integer\"},\r",
									"            MecanismoOtro: { \"type\": \"string\"},\r",
									"            DescripcionAccidente: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"string\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            FuncionarioSalario: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"integer\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            OcupacionActualNumeroDias: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"integer\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            OtraLabor: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"string\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            PresenciaronAccidente: { type: \"integer\"},\r",
									"            SitioAccidenteOtro: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"string\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            additionalProperties: false\r",
									"            },\r",
									"        required: [\r",
									"            'NombreFuncionario',\r",
									"            'FechaAccidente',\r",
									"            'Municipiodelaenfermedad',\r",
									"            'CodActividadEconomicaPersona',\r",
									"            'CausoMuerte',\r",
									"            'HoraAccidente',\r",
									"            'Minuto',\r",
									"            'Horalaborada',\r",
									"            'MinutoLaborado',\r",
									"            'LaborHabitual',\r",
									"            'MecanismoOtro',\r",
									"            'DescripcionAccidente',\r",
									"            'FuncionarioSalario',\r",
									"            'OcupacionActualNumeroDias',\r",
									"            'OtraLabor',\r",
									"            'PresenciaronAccidente',\r",
									"            'SitioAccidenteOtro'\r",
									"            ]\r",
									"        }    \r",
									"    }\r",
									"\r",
									"pm.test(\"La respuesta coincide con el esquema\",()=>{\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var fechaiso8601 = 'YYYY-MM-DDTHH:mm:ss';\r",
									"var fechaactual = moment().format(fechaiso8601);\r",
									"pm.environment.set(\"FechaAccidente\", fechaactual);\r",
									"pm.globals.set(\"FechaAccidente\", fechaactual);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"CausoMuerte\":0,\r\n\"CodActividadEconomicaPersona\":\"2\",\r\n\"Municipiodelaenfermedad\":\"ACEVEDO\",\r\n\"NombreFuncionario\":\"pruebaqa\",\r\n\"DescripcionAccidente\":\"golpe\",\r\n\"FechaAccidente\":\"{{FechaAccidente}}\",\r\n\"FuncionarioSalario\":2500000,\r\n\"Hora\":3,\r\n\"LaborHabitual\":1,\r\n\"HoraLaborada\":11,\r\n\"MecanismoOtro\":\"N.A.\",\r\n\"Minuto\":3,\r\n\"MinutoLaborado\":11,\r\n\"OcupacionActualNumeroDias\":2,\r\n\"OtraLabor\":\"\",\r\n\"PresenciaronAccidente\":1,\r\n\"SitioAccidenteOtro\":\"N.A.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/furel/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"furel",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar un Furel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El usuario a sido editado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json();\r",
									"\r",
									"pm.test(\"El mensaje ha sido validado con éxito\",()=>{\r",
									"    pm.expect(jsonBody.Message).to.equals(\"la PQR ha sido creada exitosamente. El usuario ya existe en la base de datos, para actualizar los datos se debe realizar mediante el api de clientes. \")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: \"object\",\r",
									"    items:  {\r",
									"        properties: {\r",
									"            NombreFuncionario: { \"type\": \"string\"},\r",
									"            FechaAccidente: { \r",
									"                oneOff: [\r",
									"                    { \"type\": \"string\",                   \r",
									"                    \"format\": \"data-time\",                   \r",
									"                    \"pattern\": \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"                \r",
									"                    },\r",
									"                    { type: \"intenger\"}\r",
									"                ]},\r",
									"            Municipiodelaenfermedad: { \"type\": \"string\"},\r",
									"            CodActividadEconomicaPersona: { \"type\": \"integer\"},\r",
									"            CausoMuerte: { \"type\": \"integer\"},\r",
									"            HoraAccidente: { \"type\": \"integer\"},\r",
									"            Minuto: { \"type\": \"integer\"},\r",
									"            Horalaborada: { \"type\": \"integer\"},\r",
									"            MinutoLaborado: { \"type\": \"integer\"},\r",
									"            LaborHabitual: { \"type\": \"integer\"},\r",
									"            MecanismoOtro: { \"type\": \"string\"},\r",
									"            DescripcionAccidente: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"string\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            FuncionarioSalario: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"integer\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            OcupacionActualNumeroDias: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"integer\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            OtraLabor: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"string\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            PresenciaronAccidente: { type: \"integer\"},\r",
									"            SitioAccidenteOtro: {\r",
									"                oneOff: [\r",
									"                    { \"type\": \"string\"},\r",
									"                    { \"type\": \"null\"},\r",
									"                    ]},\r",
									"            additionalProperties: false\r",
									"            },\r",
									"        required: [\r",
									"            'NombreFuncionario',\r",
									"            'FechaAccidente',\r",
									"            'Municipiodelaenfermedad',\r",
									"            'CodActividadEconomicaPersona',\r",
									"            'CausoMuerte',\r",
									"            'HoraAccidente',\r",
									"            'Minuto',\r",
									"            'Horalaborada',\r",
									"            'MinutoLaborado',\r",
									"            'LaborHabitual',\r",
									"            'MecanismoOtro',\r",
									"            'DescripcionAccidente',\r",
									"            'FuncionarioSalario',\r",
									"            'OcupacionActualNumeroDias',\r",
									"            'OtraLabor',\r",
									"            'PresenciaronAccidente',\r",
									"            'SitioAccidenteOtro'\r",
									"            ]\r",
									"        }    \r",
									"    }\r",
									"\r",
									"pm.test(\"La respuesta coincide con el esquema\",()=>{\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"moment = require('moment');\r",
									"var fechaiso8601 = 'YYYY-MM-DDTHH:mm:ss';\r",
									"var fechaactual = moment().format(fechaiso8601);\r",
									"pm.environment.set(\"FechaAccidente\", fechaactual);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "{{apiKey}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"CausoMuerte\":0,\r\n\"CodActividadEconomicaPersona\":\"7\",\r\n\"Municipiodelaenfermedad\":\"ACEVEDO\",\r\n\"NombreFuncionario\":\"pruebaqa\",\r\n\"DescripcionAccidente\":\"11/ene./2022\",\r\n\"FechaAccidente\":\"{{FechaAccidente}}\",\r\n\"FuncionarioSalario\":2500000.00,\r\n\"Hora\":1,\r\n\"LaborHabitual\":2,\r\n\"HoraLaborada\":31,\r\n\"MecanismoOtro\":\"N.A.\",\r\n\"Minuto\":3,\r\n\"MinutoLaborado\":11,\r\n\"OcupacionActualNumeroDias\":2,\r\n\"OtraLabor\":\"\",\r\n\"PresenciaronAccidente\":1,\r\n\"SitioAccidenteOtro\":\"N.A.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/furel/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"furel",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "12345",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Furil",
			"item": [
				{
					"name": "Buscar Furil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de Furil traida con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/furil/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"furil",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear Furil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Furil creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"CausoMuerte\":0,\r\n\"CodActividadEconomicaPersona\":\"2\",\r\n\"Municipiodelaenfermedad\":\"ACEVEDO\",\r\n\"NombreFuncionario\":\"{{Nombre}}\" ,\r\n\"DescripcionAccidente\":\"11/ene./2018\",\r\n\"FechaAccidente\":\"2018-04-08T00:00:00\",\r\n\"FuncionarioSalario\":2500000.00,\r\n\"Hora\":3,\r\n\"LaborHabitual\":1,\r\n\"HoraLaborada\":11,\r\n\"MecanismoOtro\":\"N.A.\",\r\n\"Minuto\":3,\r\n\"MinutoLaborado\":11,\r\n\"OcupacionActualNumeroDias\":2,\r\n\"OtraLabor\":\"\",\r\n\"PresenciaronAccidente\":1,\r\n\"SitioAccidenteOtro\":\"N.A.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/furil/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"furil",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar Furil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"usuario editado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"CausoMuerte\":0,\r\n\"CodActividadEconomicaPersona\":\"2\",\r\n\"Municipiodelaenfermedad\":\"ACEVEDO\",\r\n\"NombreFuncionario\":\"pruebaqa\",\r\n\"DescripcionAccidente\":\"11/ene./2018\",\r\n\"FechaAccidente\":\"2018-04-08T00:00:00\",\r\n\"FuncionarioSalario\":2500000.00,\r\n\"Hora\":1,\r\n\"LaborHabitual\":2,\r\n\"HoraLaborada\":3,\r\n\"MecanismoOtro\":\"N.A.\",\r\n\"Minuto\":3,\r\n\"MinutoLaborado\":11,\r\n\"OcupacionActualNumeroDias\":2,\r\n\"OtraLabor\":\"\",\r\n\"PresenciaronAccidente\":1,\r\n\"SitioAccidenteOtro\":\"N.A.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/furil/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"furil",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "12345",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Grupo",
			"item": [
				{
					"name": "Buscar Grupo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de grupos traida con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de grupos obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type : \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdGrupo: { type: 'number'},\r",
									"        NomGrupo: {\r",
									"            oneOff:[\r",
									"                {type: 'string'},\r",
									"                {type: 'number'}\r",
									"            ]},\r",
									"        Descripcion:  {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"        required: [    \r",
									"        'IdGrupo',\r",
									"        'NomGrupo',\r",
									"        'Descripcion'\r",
									"     ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/GRUPO/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"GRUPO",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear grupo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"NomGrupo\", pm.variables.replaceIn('{{$randomFirstName}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Grupo creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Grupo creado exitosamente.\")\r",
									"})\r",
									"\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdGrupo: { type: 'number'},\r",
									"        NomGrupo: {\r",
									"            oneOff:[\r",
									"                {type: 'string'},\r",
									"                {type: 'number'}\r",
									"            ]},\r",
									"        Descripcion:  {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"            SystemProtected: {\r",
									"                 oneOff:[\r",
									"                    {type: 'number'},\r",
									"                    {type: 'null'}\r",
									"                ]\r",
									"            },\r",
									"\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [   \r",
									"    'IdGrupo',\r",
									"    'NomGrupo',\r",
									"    'Descripcion',\r",
									"    'SystemProtected'\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NomGrupo\":\"{{NomGrupo}}\",\r\n\"Descripcion\":\"Prueba realizada desde postman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/GRUPO/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"GRUPO",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar grupo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"pm.test(\"Grupo editado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Grupo actualizado exitosamente.\")\r",
									"})\r",
									"\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdGrupo: { type: 'number'},\r",
									"        NomGrupo: {\r",
									"            oneOff:[\r",
									"                {type: 'string'},\r",
									"                {type: 'number'}\r",
									"            ]},\r",
									"        Descripcion:  {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"            SystemProtected: {\r",
									"                oneOff:[\r",
									"                    {type: 'number'},\r",
									"                    {type: 'null'}\r",
									"                ]\r",
									"            },\r",
									"\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [   \r",
									"    'IdGrupo',\r",
									"    'NomGrupo',\r",
									"    'Descripcion',\r",
									"    'SystemProtected'\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"IdGrupo\": 1,\r\n\"NomGrupo\":\"{{NomGrupo}}\",\r\n\"Descripcion\":\"Grupo de administradoress\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/GRUPO/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"GRUPO",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "12345",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Indicadores",
			"item": [
				{
					"name": "Buscar indicadores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Indicadores traidos con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de indicadores obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdIndicador: { type: 'number'},\r",
									"        Nombredelindicador:{\r",
									"            oneOff:[\r",
									"                {type: 'string'},\r",
									"                {type: 'number'}\r",
									"            ]},\r",
									"        Area: { type: 'string'},\r",
									"        FrecuenciaMedición: { type: 'string'},\r",
									"        Tipo: { type: 'string'},\r",
									"        Proceso: { type: 'string'},\r",
									"        Tendencia: { type: 'string'},\r",
									"        UnidaddeMedida: {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Formula: {\r",
									"           oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        FuenteInformacion: {\r",
									"           oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Familia: {\r",
									"           oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Meta: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Objetivo: {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        QuienMide: {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        ToleranciaSuperior: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        ToleranciaInferior: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Oficinas: {\r",
									"            oneOff: [\r",
									"                {type: 'array'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        ObjetivosIndicador: {\r",
									"            oneOff: [\r",
									"                {type: 'array'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdIndicador',\r",
									"        'Nombredelindicador',\r",
									"        'Area',\r",
									"        'FrecuenciaMedición',\r",
									"        'Tipo',\r",
									"        'Proceso',\r",
									"        'Tendencia',\r",
									"        'UnidaddeMedida',\r",
									"        'Formula',\r",
									"        'FuenteInformacion',\r",
									"        'Familia',\r",
									"        'Meta',\r",
									"        'Objetivo',\r",
									"        'QuienMide',\r",
									"        'ToleranciaInferior',\r",
									"        'ToleranciaSuperior',\r",
									"        'Oficinas',\r",
									"        'ObjetivosIndicador'\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/indicadores/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"indicadores",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear indicador",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"nomIndicador\", pm.variables.replaceIn('{{$randomFirstName}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"indicador creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Indicador ha sido creado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdIndicador: { type: 'number'},\r",
									"        Nombredelindicador:{\r",
									"            oneOff:[\r",
									"                {type: 'string'},\r",
									"                {type: 'number'}\r",
									"            ]},\r",
									"        Area: { type: 'string'},\r",
									"        FrecuenciaMedición: { type: 'string'},\r",
									"        Tipo: { oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Proceso: { type: 'string'},\r",
									"        Tendencia: { type: 'string'},\r",
									"        UnidaddeMedida: {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Formula: {\r",
									"           oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        FuenteInformacion: {\r",
									"           oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Familia: {\r",
									"           oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Meta: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Objetivo: {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        QuienMide: {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        ToleranciaSuperior: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        ToleranciaInferior: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Oficinas: {\r",
									"            oneOff: [\r",
									"                {type: 'array'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        ObjetivosIndicador: {\r",
									"            oneOff: [\r",
									"                {type: 'array'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdIndicador',\r",
									"        'Nombredelindicador',\r",
									"        'Area',\r",
									"        'FrecuenciaMedición',\r",
									"        'Tipo',\r",
									"        'Proceso',\r",
									"        'Tendencia',\r",
									"        'UnidaddeMedida',\r",
									"        'Formula',\r",
									"        'FuenteInformacion',\r",
									"        'Familia',\r",
									"        'Meta',\r",
									"        'Objetivo',\r",
									"        'QuienMide',\r",
									"        'ToleranciaInferior',\r",
									"        'ToleranciaSuperior',\r",
									"        'Oficinas',\r",
									"        'ObjetivosIndicador'\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"Nombredelindicador\":\"{{nomIndicador}}\",\r\n\"Area\": \"Administrativa\" ,\r\n\"FrecuenciaMedición\":\"Mensual\",\r\n\"Tipo\":null,\r\n\"Proceso\":\"QA\",\r\n\"Tendencia\":\"Positiva\",\r\n\"UnidaddeMedida\":null,\r\n\"Formula\":null,\r\n\"FuenteInformacion\":null,\r\n\"Meta\":null,\r\n\"QuienMide\":null,\r\n\"ToleranciaInferior\":90,\r\n\"ToleranciaSuperior\":120\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/indicadores/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"indicadores",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar un indicador",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"el indicador a sido editado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Indicador ha sido actualizado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdIndicador: { type: 'number'},\r",
									"        Nombredelindicador:{\r",
									"            oneOff:[\r",
									"                {type: 'string'},\r",
									"                {type: 'number'}\r",
									"            ]},\r",
									"        Area: { type: 'string'},\r",
									"        FrecuenciaMedición: { type: 'string'},\r",
									"        Tipo: { oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Proceso: { type: 'string'},\r",
									"        Tendencia: { type: 'string'},\r",
									"        UnidaddeMedida: {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Formula: {\r",
									"           oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        FuenteInformacion: {\r",
									"           oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Familia: {\r",
									"           oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Meta: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Objetivo: {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        QuienMide: {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        ToleranciaSuperior: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        ToleranciaInferior: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Oficinas: {\r",
									"            oneOff: [\r",
									"                {type: 'array'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        ObjetivosIndicador: {\r",
									"            oneOff: [\r",
									"                {type: 'array'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdIndicador',\r",
									"        'Nombredelindicador',\r",
									"        'Area',\r",
									"        'FrecuenciaMedición',\r",
									"        'Tipo',\r",
									"        'Proceso',\r",
									"        'Tendencia',\r",
									"        'UnidaddeMedida',\r",
									"        'Formula',\r",
									"        'FuenteInformacion',\r",
									"        'Familia',\r",
									"        'Meta',\r",
									"        'Objetivo',\r",
									"        'QuienMide',\r",
									"        'ToleranciaInferior',\r",
									"        'ToleranciaSuperior',\r",
									"        'Oficinas',\r",
									"        'ObjetivosIndicador'\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"Nombredelindicador\":\"{{nomIndicador}}\",\r\n\"Area\": \" \",\r\n\"FrecuenciaMedición\":\"Mensual\",\r\n\"Tipo\":\"aseguramiento de calidad\",\r\n\"Proceso\":\"QA\",\r\n\"Tendencia\":\"Positiva\",\r\n\"UnidaddeMedida\":null,\r\n\"Formula\":null,\r\n\"FuenteInformacion\":null,\r\n\"Meta\":null,\r\n\"QuienMide\":null,\r\n\"ToleranciaInferior\":80,\r\n\"ToleranciaSuperior\":100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/indicadores/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"indicadores",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener familias del indicador",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Familia de indicadores traida con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Familias obtenidas exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_IndicadorFamilia: { type: 'number'},\r",
									"        NomFamilia: {\r",
									"            oneOff: [\r",
									"                {type: 'string'},\r",
									"                {type: 'number'}\r",
									"            ]},\r",
									"        codFamilia: { type: 'number'},\r",
									"        codIndicador: { type: 'number'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'Id_IndicadorFamilia',\r",
									"        'NomFamilia',\r",
									"        'CodFamilia',\r",
									"        'CodIndicador'\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/indicador/3/familia",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"indicador",
								"3",
								"familia"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "12345",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "PQR",
			"item": [
				{
					"name": "Crear PQR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"la PQR ha sido creada exitosamente. El usuario ya existe en la base de datos, para actualizar los datos se debe realizar mediante el api de clientes. \")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        NombreCliente: { type: 'string'},\r",
									"        TipoDocIdentidad: { type: 'string'},\r",
									"        Documento: { type: 'string'},\r",
									"        Tipocliente: { type: 'string'},\r",
									"        EmailCliente: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TelefonoCliente: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        TipoCaso: {\r",
									"            oneOff:[\r",
									"                {type: 'string'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        Descripcion: {\r",
									"            oneOff:[\r",
									"                {type: 'string'},\r",
									"                {type: 'null'}\r",
									"            ]},\r",
									"        CodProceso: { type: 'number'},\r",
									"        CodTipoAccion: { type: 'number'},\r",
									"        FechaCierreProyectada: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodArea: { type: \"number\"},\r",
									"        Productos: { type: 'array'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'NombreCliente',\r",
									"        'TipoDocIdentidad',\r",
									"        'Documento',\r",
									"        'Tipocliente',\r",
									"        'EmailCliente',\r",
									"        'TelefonoCliente',\r",
									"        'CodCiudad',\r",
									"        'TipoCaso',\r",
									"        'Descripcion',\r",
									"        'CodTipoAccion',\r",
									"        'CodProceso',\r",
									"        'FechaCierreProyectada',\r",
									"        'CodArea',\r",
									"        'Productos'\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"NomPQR\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.globals.set(\"telefono\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							},
							{
								"key": "ContentType",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NombreCliente\":\"{{NomPQR}}\",\r\n\"TipoDocIdentidad\": \"CC\",\r\n\"Documento\": \"{{NumDocumento}}\",\r\n\"Tipocliente\": \"Funcionario\",\r\n\"EmailCliente\":\"mann12@a.com\",\r\n\"TelefonoCliente\": \"{{telefono}}\",\r\n\"TipoCaso\": \"Queja 12\",\r\n\"Descripcion\":\"mensaje de queja 12A\",\r\n\"CodTipoAccion\": 8,\r\n\"CodProceso\" : 2,\r\n\"Productos\":[{\"CodProducto\":1},{\"CodProducto\":2},{\"CodProducto\":3}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/pqr/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"pqr",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Adjuntar archivo PQR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Archivo almacenado correctamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Archivo: {\r",
									"            oneOff:[ \r",
									"                {type: 'string'},\r",
									"                {type: 'number'}\r",
									"                ]},\r",
									"        Nombre: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Extension: {\r",
									"            type: 'string'\r",
									"        },\r",
									"        Descripcion: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        OrigenRegistro: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ResponsableArchivar: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LugarAlmacenamiento: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Codigo: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Proteccion: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Recuperacion: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Archiva: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LugarDeAlmacenamiento: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Disposicion: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        DondeSeConserva: {\r",
									"            oneOff:[\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'Archivo',\r",
									"        'Nombre',\r",
									"        'Extension',\r",
									"        'Descripcion',\r",
									"        'OrigenRegistro',\r",
									"        'ResponsableArchivar',\r",
									"        'LugarAlmacenamiento',\r",
									"        'Codigo',\r",
									"        'Proteccion',\r",
									"        'Recuperacion',\r",
									"        'Archiva',\r",
									"        'LugarDeAlmacenamiento',\r",
									"        'Disposicion',\r",
									"        'DondeSeConserva'\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"Archivo\":\"\",\r\n\"Nombre\":\"PruebasAyC-Colanta CICLO II.docx\",\r\n\"Extension\":\"docx\",\r\n\"Descripcion\":\"Esto es un ejemplo de una peticion de archivo\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/pqr/2/anexo",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"pqr",
								"2",
								"anexo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Usuarios",
			"item": [
				{
					"name": "Crear un Usuario",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"NomUsuario\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.globals.set(\"NumeroIdentificacion1\", pm.variables.replaceIn('{{$randomBankAccount}}'));\r",
									"pm.globals.set(\"Login\",pm.variables.replaceIn('{{Nombre}}'+'.'+'{{NumeroIdentificacion1}}'));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Usuario creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Usuario ha sido creado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdUsuario: { type: 'number'},\r",
									"        NomUsuario: { type: 'string'},\r",
									"        CodOficina: { type: 'number'},\r",
									"        NumDocumento: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Clave: { type: 'string' },\r",
									"        Descripcion: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodUsuarioJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCargo: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAdmin:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAuditor:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsCalidad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Login:  { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"        CodIdioma:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SamAccountName:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Identificacion:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagBorrado: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        FlagActivo: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        FlagEsAdministrador: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        NivelGlobal: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        CodUsuarioEscalamiento:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCentroCosto:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fechanacimiento: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodTipoIdentificacion: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Foto:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsEvaluador:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SystemProtected:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Esfuncionario:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsConsulta:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdUsuario',\r",
									"        'NomUsuario',\r",
									"        'CodOficina',\r",
									"        'NumDocumento',\r",
									"        'Clave',\r",
									"        'Descripcion',\r",
									"        'Email',\r",
									"        'CodArea',\r",
									"        'CodUsuarioJefe',\r",
									"        'CodCargo',\r",
									"        'EsJefe',\r",
									"        'EsAdmin',\r",
									"        'EsAuditor',\r",
									"        'EsCalidad',\r",
									"        'CodCiudad',\r",
									"        'Login',\r",
									"        'Activo',\r",
									"        'CodIdioma',\r",
									"        'SamAccountName',\r",
									"        'Identificacion',\r",
									"        'FlagBorrado',\r",
									"        'FlagActivo',\r",
									"        'FlagEsAdministrador',\r",
									"        'NivelGlobal',\r",
									"        'CodUsuarioEscalamiento',\r",
									"        'CodCentroCosto',\r",
									"        'Fechanacimiento',\r",
									"        'CodTipoIdentificacion',\r",
									"        'Foto',\r",
									"        'EsEvaluador',\r",
									"        'SystemProtected',\r",
									"        'EsFuncionario',\r",
									"        'EsConsulta'\r",
									"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NomUsuario\":\"{{NomUsuario}}\",\r\n\"Oficina\":\"2010\",\r\n\"Area\":\"Compras\",\r\n\"Cargo\":\"LA DORADA\",\r\n\"Ciudad\":\"BOGOTÁ D.C.\",\r\n\"NumDocumento\":\"{{NumeroIdentificacion1}}\",\r\n\"Login\":\"{{Login}}\",\r\n\"Descripcion\":\"Descripcion \",\r\n\"Email\":\"Email \",\r\n\"Activo\":\"1\",\r\n\"Clave\":\"12345\",\r\n\"CentroCosto\": 1,\r\n\"Jefe\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/usuarios/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"usuarios",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de usuarios traido con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Usuarios obtenida exitosamente.\")\r",
									"})\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdUsuario: { type: 'number'},\r",
									"        NomUsuario: { type: 'string'},\r",
									"        CodOficina: { type: 'number'},\r",
									"        NumDocumento: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Clave: { type: 'string' },\r",
									"        Descripcion: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodUsuarioJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCargo: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAdmin:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAuditor:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsCalidad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Login:  { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"        CodIdioma:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SamAccountName:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Identificacion:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagBorrado:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagActivo:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagEsAdministrador: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NivelGlobal: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        CodUsuarioEscalamiento:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCentroCosto:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fechanacimiento: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodTipoIdentificacion: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Foto:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsEvaluador:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SystemProtected:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Esfuncionario:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsConsulta:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdUsuario',\r",
									"        'NomUsuario',\r",
									"        'CodOficina',\r",
									"        'NumDocumento',\r",
									"        'Clave',\r",
									"        'Descripcion',\r",
									"        'Email',\r",
									"        'CodArea',\r",
									"        'CodUsuarioJefe',\r",
									"        'CodCargo',\r",
									"        'EsJefe',\r",
									"        'EsAdmin',\r",
									"        'EsAuditor',\r",
									"        'EsCalidad',\r",
									"        'CodCiudad',\r",
									"        'Login',\r",
									"        'Activo',\r",
									"        'CodIdioma',\r",
									"        'SamAccountName',\r",
									"        'Identificacion',\r",
									"        'FlagBorrado',\r",
									"        'FlagActivo',\r",
									"        'FlagEsAdministrador',\r",
									"        'NivelGlobal',\r",
									"        'CodUsuarioEscalamiento',\r",
									"        'CodCentroCosto',\r",
									"        'Fechanacimiento',\r",
									"        'CodTipoIdentificacion',\r",
									"        'Foto',\r",
									"        'EsEvaluador',\r",
									"        'SystemProtected',\r",
									"        'EsFuncionario',\r",
									"        'EsConsulta'\r",
									"\r",
									"    ]}\r",
									"}\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/usuarios/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"usuarios",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar Usuario Buscar por ID Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de usuarios obtenida exitosamente.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Usuarios obtenida exitosamente.\")\r",
									"})\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdUsuario: { type: 'number'},\r",
									"        NomUsuario: { type: 'string'},\r",
									"        CodOficina: { type: 'number'},\r",
									"        NumDocumento: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Clave: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Descripcion: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodArea: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodUsuarioJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAdmin: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAuditor:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsCalidad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Cargo:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Ciudad:  { type: 'string'},\r",
									"        Login: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo:  { \r",
									"                type: 'number'\r",
									"            },\r",
									"       CodIdioma:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Identificacion:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fechanacimiento: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodCentroCosto:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CentroCosto:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Jefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoIdentificacion:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsEvaluador:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsFuncionario:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsConsulta:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [     \r",
									"        'IdUsuario',\r",
									"        'NomUsuario',\r",
									"        'CodCargo',\r",
									"        'CodOficina',\r",
									"        'Oficina',\r",
									"        'NumDocumento',\r",
									"        'Clave',\r",
									"        'Descripcion',\r",
									"        'Email',\r",
									"        'CodArea',\r",
									"        'Area',\r",
									"        'CodUsuarioJefe',\r",
									"        'EsAdmin',\r",
									"        'EsAuditor',\r",
									"        'EsCalidad',\r",
									"        'CodCiudad',\r",
									"        'Cargo',\r",
									"        'Ciudad',\r",
									"        'Login',\r",
									"        'Activo',\r",
									"        'CodIdioma',\r",
									"        'Identificacion',\r",
									"        'Fechanacimiento',\r",
									"        'CodCentroCosto',\r",
									"        'CentroCosto',\r",
									"        'Jefe',\r",
									"        'CodTipoIdentificacion',\r",
									"        'EsEvaluador',\r",
									"        'EsFuncionario',\r",
									"        'EsConsulta'\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/usuarios/2",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"usuarios",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar Usuario Buscar por Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de usuarios obtenida exitosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Usuarios obtenida exitosamente.\")\r",
									"})\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdUsuario: { type: 'number'},\r",
									"        NomUsuario: { type: 'string'},\r",
									"        CodOficina: { type: 'number'},\r",
									"        NumDocumento: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Clave: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Descripcion: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodArea: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodUsuarioJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAdmin: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAuditor:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsCalidad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Cargo:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Ciudad:  { type: 'string'},\r",
									"        Login: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo:  { \r",
									"                type: 'number'\r",
									"            },\r",
									"       CodIdioma:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Identificacion:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fechanacimiento: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodCentroCosto:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CentroCosto:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Jefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoIdentificacion:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsEvaluador:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsFuncionario:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsConsulta:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [     \r",
									"        'IdUsuario',\r",
									"        'NomUsuario',\r",
									"        'CodCargo',\r",
									"        'CodOficina',\r",
									"        'Oficina',\r",
									"        'NumDocumento',\r",
									"        'Clave',\r",
									"        'Descripcion',\r",
									"        'Email',\r",
									"        'CodArea',\r",
									"        'Area',\r",
									"        'CodUsuarioJefe',\r",
									"        'EsAdmin',\r",
									"        'EsAuditor',\r",
									"        'EsCalidad',\r",
									"        'CodCiudad',\r",
									"        'Cargo',\r",
									"        'Ciudad',\r",
									"        'Login',\r",
									"        'Activo',\r",
									"        'CodIdioma',\r",
									"        'Identificacion',\r",
									"        'Fechanacimiento',\r",
									"        'CodCentroCosto',\r",
									"        'CentroCosto',\r",
									"        'Jefe',\r",
									"        'CodTipoIdentificacion',\r",
									"        'EsEvaluador',\r",
									"        'EsFuncionario',\r",
									"        'EsConsulta'\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Login\":\"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/usuarios/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"usuarios",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consulta de Todos los usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Se espera que Status Code sea 200 para Consulta Exitosa\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.StatusCode).to.eql(200);\r",
									"}); \r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Usuarios obtenida exitosamente.\")\r",
									"})\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdUsuario: { type: 'number'},\r",
									"        NomUsuario: { type: 'string'},\r",
									"        CodOficina: { type: 'number'},\r",
									"        NumDocumento: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Clave: { type: 'string' },\r",
									"        Descripcion: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodUsuarioJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCargo: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAdmin:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAuditor:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsCalidad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Login:  { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"        CodIdioma:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SamAccountName:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Identificacion:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagBorrado:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagActivo:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagEsAdministrador: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NivelGlobal: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        CodUsuarioEscalamiento:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCentroCosto:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fechanacimiento: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodTipoIdentificacion: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Foto:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsEvaluador:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SystemProtected:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Esfuncionario:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsConsulta:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdUsuario',\r",
									"        'NomUsuario',\r",
									"        'CodOficina',\r",
									"        'NumDocumento',\r",
									"        'Clave',\r",
									"        'Descripcion',\r",
									"        'Email',\r",
									"        'CodArea',\r",
									"        'CodUsuarioJefe',\r",
									"        'CodCargo',\r",
									"        'EsJefe',\r",
									"        'EsAdmin',\r",
									"        'EsAuditor',\r",
									"        'EsCalidad',\r",
									"        'CodCiudad',\r",
									"        'Login',\r",
									"        'Activo',\r",
									"        'CodIdioma',\r",
									"        'SamAccountName',\r",
									"        'Identificacion',\r",
									"        'FlagBorrado',\r",
									"        'FlagActivo',\r",
									"        'FlagEsAdministrador',\r",
									"        'NivelGlobal',\r",
									"        'CodUsuarioEscalamiento',\r",
									"        'CodCentroCosto',\r",
									"        'Fechanacimiento',\r",
									"        'CodTipoIdentificacion',\r",
									"        'Foto',\r",
									"        'EsEvaluador',\r",
									"        'SystemProtected',\r",
									"        'EsFuncionario',\r",
									"        'EsConsulta'\r",
									"\r",
									"    ]}\r",
									"}\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/usuarios",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Listado de Usuarios 0 a 20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Se espera que Status Code sea 200 para Consulta Exitosa\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.StatusCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Usuarios obtenida exitosamente.\")\r",
									"})\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdUsuario: { type: 'number'},\r",
									"        NomUsuario: { type: 'string'},\r",
									"        CodOficina: { type: 'number'},\r",
									"        NumDocumento: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Clave: { type: 'string' },\r",
									"        Descripcion: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodUsuarioJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCargo: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAdmin:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAuditor:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsCalidad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Login:  { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"        CodIdioma:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SamAccountName:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Identificacion:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagBorrado:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagActivo:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagEsAdministrador: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NivelGlobal: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        CodUsuarioEscalamiento:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCentroCosto:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fechanacimiento: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodTipoIdentificacion: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Foto:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsEvaluador:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SystemProtected:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Esfuncionario:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsConsulta:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdUsuario',\r",
									"        'NomUsuario',\r",
									"        'CodOficina',\r",
									"        'NumDocumento',\r",
									"        'Clave',\r",
									"        'Descripcion',\r",
									"        'Email',\r",
									"        'CodArea',\r",
									"        'CodUsuarioJefe',\r",
									"        'CodCargo',\r",
									"        'EsJefe',\r",
									"        'EsAdmin',\r",
									"        'EsAuditor',\r",
									"        'EsCalidad',\r",
									"        'CodCiudad',\r",
									"        'Login',\r",
									"        'Activo',\r",
									"        'CodIdioma',\r",
									"        'SamAccountName',\r",
									"        'Identificacion',\r",
									"        'FlagBorrado',\r",
									"        'FlagActivo',\r",
									"        'FlagEsAdministrador',\r",
									"        'NivelGlobal',\r",
									"        'CodUsuarioEscalamiento',\r",
									"        'CodCentroCosto',\r",
									"        'Fechanacimiento',\r",
									"        'CodTipoIdentificacion',\r",
									"        'Foto',\r",
									"        'EsEvaluador',\r",
									"        'SystemProtected',\r",
									"        'EsFuncionario',\r",
									"        'EsConsulta'\r",
									"\r",
									"    ]}\r",
									"}\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/usuarios?RegistroActual=0&TamanoPagina=20",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"usuarios"
							],
							"query": [
								{
									"key": "RegistroActual",
									"value": "0"
								},
								{
									"key": "TamanoPagina",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Listado de Usuarios 21 a 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Se trae listado de usuarios de 21 a 100\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.StatusCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Usuarios obtenida exitosamente.\")\r",
									"})\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdUsuario: { type: 'number'},\r",
									"        NomUsuario: { type: 'string'},\r",
									"        CodOficina: { type: 'number'},\r",
									"        NumDocumento: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Clave: { type: 'string' },\r",
									"        Descripcion: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodUsuarioJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCargo: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAdmin:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAuditor:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsCalidad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Login:  { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"        CodIdioma:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SamAccountName:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Identificacion:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagBorrado:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagActivo:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagEsAdministrador: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NivelGlobal: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        CodUsuarioEscalamiento:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCentroCosto:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fechanacimiento: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodTipoIdentificacion: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Foto:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsEvaluador:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SystemProtected:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Esfuncionario:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsConsulta:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdUsuario',\r",
									"        'NomUsuario',\r",
									"        'CodOficina',\r",
									"        'NumDocumento',\r",
									"        'Clave',\r",
									"        'Descripcion',\r",
									"        'Email',\r",
									"        'CodArea',\r",
									"        'CodUsuarioJefe',\r",
									"        'CodCargo',\r",
									"        'EsJefe',\r",
									"        'EsAdmin',\r",
									"        'EsAuditor',\r",
									"        'EsCalidad',\r",
									"        'CodCiudad',\r",
									"        'Login',\r",
									"        'Activo',\r",
									"        'CodIdioma',\r",
									"        'SamAccountName',\r",
									"        'Identificacion',\r",
									"        'FlagBorrado',\r",
									"        'FlagActivo',\r",
									"        'FlagEsAdministrador',\r",
									"        'NivelGlobal',\r",
									"        'CodUsuarioEscalamiento',\r",
									"        'CodCentroCosto',\r",
									"        'Fechanacimiento',\r",
									"        'CodTipoIdentificacion',\r",
									"        'Foto',\r",
									"        'EsEvaluador',\r",
									"        'SystemProtected',\r",
									"        'EsFuncionario',\r",
									"        'EsConsulta'\r",
									"\r",
									"    ]}\r",
									"}\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/usuarios?RegistroActual=21&TamanoPagina=100",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"usuarios"
							],
							"query": [
								{
									"key": "RegistroActual",
									"value": "21"
								},
								{
									"key": "TamanoPagina",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar un Usuario",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"NomUsuario\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.globals.set(\"NomLogin\",  pm.variables.replaceIn (\"{{RandomLogin}}\"));\r",
									"pm.globals.set(\"NumDocumento\", pm.variables.replaceIn('{{$randomDocument}}'));\r",
									"var Clave= _.random (0,180); \r",
									"pm.globals.set(\"randomClave\", Clave);\r",
									"var Clave=(\"{{randomClave}}\")\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"usuario editado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Usuario ha sido actualizado exitosamente.\")\r",
									"})\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdUsuario: { type: 'number'},\r",
									"        NomUsuario: { type: 'string'},\r",
									"        CodOficina: { type: 'number'},\r",
									"        NumDocumento: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Clave: { type: 'string' },\r",
									"        Descripcion: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodUsuarioJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCargo: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAdmin:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAuditor:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsCalidad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Login:  { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"        CodIdioma:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SamAccountName:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Identificacion:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagBorrado:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagActivo:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FlagEsAdministrador: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NivelGlobal: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        CodUsuarioEscalamiento:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCentroCosto:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fechanacimiento: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodTipoIdentificacion: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Foto:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsEvaluador:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SystemProtected:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Esfuncionario:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsConsulta:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdUsuario',\r",
									"        'NomUsuario',\r",
									"        'CodOficina',\r",
									"        'NumDocumento',\r",
									"        'Clave',\r",
									"        'Descripcion',\r",
									"        'Email',\r",
									"        'CodArea',\r",
									"        'CodUsuarioJefe',\r",
									"        'CodCargo',\r",
									"        'EsJefe',\r",
									"        'EsAdmin',\r",
									"        'EsAuditor',\r",
									"        'EsCalidad',\r",
									"        'CodCiudad',\r",
									"        'Login',\r",
									"        'Activo',\r",
									"        'CodIdioma',\r",
									"        'SamAccountName',\r",
									"        'Identificacion',\r",
									"        'FlagBorrado',\r",
									"        'FlagActivo',\r",
									"        'FlagEsAdministrador',\r",
									"        'NivelGlobal',\r",
									"        'CodUsuarioEscalamiento',\r",
									"        'CodCentroCosto',\r",
									"        'Fechanacimiento',\r",
									"        'CodTipoIdentificacion',\r",
									"        'Foto',\r",
									"        'EsEvaluador',\r",
									"        'SystemProtected',\r",
									"        'EsFuncionario',\r",
									"        'EsConsulta'\r",
									"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NomUsuario\":\"{{NomUsuario}}\",\r\n\"Oficina\":\"2010\",\r\n\"Area\":\"Compras\",\r\n\"Cargo\":\"LA DORADA\",\r\n\"Ciudad\":\"BOGOTÁ D.C.\",\r\n\"NumDocumento\":\"{{NumeroIdentificacion1}}\",\r\n\"Login\":\"{{Login}}\",\r\n\"Descripcion\":\"Descripcion \",\r\n\"Email\":\"Email \",\r\n\"Activo\":\"1\",\r\n\"Clave\":\"12345\",\r\n\"CentroCosto\": 1,\r\n\"Jefe\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/usuarios/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"usuarios",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Consulta Usuario Especifico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Se puede consultar un usuario especifico\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.StatusCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Usuario obtenido\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdUsuario: { type: 'number'},\r",
									"        NomUsuario: { type: 'string'},\r",
									"        CodOficina: { type: 'number'},\r",
									"        NumDocumento: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Clave: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Descripcion: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodArea: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodUsuarioJefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAdmin: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsAuditor:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsCalidad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Cargo:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Ciudad:  { type: 'string'},\r",
									"        Login: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo:  { \r",
									"                type: 'number'\r",
									"            },\r",
									"       CodIdioma:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Identificacion:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fechanacimiento: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"            ]},\r",
									"        CodCentroCosto:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CentroCosto:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Jefe: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoIdentificacion:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsEvaluador:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsFuncionario:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsConsulta:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [     \r",
									"        'IdUsuario',\r",
									"        'NomUsuario',\r",
									"        'CodCargo',\r",
									"        'CodOficina',\r",
									"        'Oficina',\r",
									"        'NumDocumento',\r",
									"        'Clave',\r",
									"        'Descripcion',\r",
									"        'Email',\r",
									"        'CodArea',\r",
									"        'Area',\r",
									"        'CodUsuarioJefe',\r",
									"        'EsAdmin',\r",
									"        'EsAuditor',\r",
									"        'EsCalidad',\r",
									"        'CodCiudad',\r",
									"        'Cargo',\r",
									"        'Ciudad',\r",
									"        'Login',\r",
									"        'Activo',\r",
									"        'CodIdioma',\r",
									"        'Identificacion',\r",
									"        'Fechanacimiento',\r",
									"        'CodCentroCosto',\r",
									"        'CentroCosto',\r",
									"        'Jefe',\r",
									"        'CodTipoIdentificacion',\r",
									"        'EsEvaluador',\r",
									"        'EsFuncionario',\r",
									"        'EsConsulta'\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/usuarios/2",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"usuarios",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Proveedores",
			"item": [
				{
					"name": "Obtener Proveedor por documento",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Se busco el usuario por documento\", function () {\r",
									"pm.globals.set(\"variable_key\", \"variable_value\");\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Proveedor obtenido exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdProveedor: { type: 'number'},\r",
									"        NomProveedor: { type: 'string'}, \r",
									"        CodTipoIdentificacion: { type: 'number'},\r",
									"        NumeroIdentificacion: { type: 'string'},\r",
									"        Contacto: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type : 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fax: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Direccion: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodPais: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodigoInternoProveedor: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        BienesServicios: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodObjetoSocial: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        VigenciaSociedad: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodNivelRiesgo: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTamanoCompania: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CatalogosDisponibles: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodMarca: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodProducto: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono2: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono3: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LovSexo: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodClasificacionTributaria: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        PeriodoPago: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ActividadEconomica: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FormaPago: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoPersona: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Declarante: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        AgenteRetenedor: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Autorretenedor: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodigoBanco: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FormaPago: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoPersona: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NombreBanco: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoCuenta: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NumeroCuenta: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ValorMaximoPago: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo: {\r",
									"            oneOff: [\r",
									"                 {type: 'boleean'},\r",
									"            \r",
									"            ]},\r",
									"        EsNivelGlobal:{\r",
									"            OneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EmailAdicional: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Sucursales: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodPais: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodOrigenRecursos: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneoff: [\r",
									"                 { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodSLFCanal: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ScoringSarlaft: {\r",
									"                type: 'number'\r",
									"           },\r",
									"        FechaScoring: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"        EsPEP:  {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                 { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [     \r",
									"        \"IdProveedor\",\r",
									"        \"NomProveedor\",\r",
									"        \"CodTipoIdentificacion\",\r",
									"        \"NumeroIdentificacion\",\r",
									"        \"Contacto\",\r",
									"        \"Telefono\",\r",
									"        \"Email\",\r",
									"        \"Fax\",\r",
									"        \"Direccion\",\r",
									"        \"CodPais\",\r",
									"        \"CodigoInternoProveedor\",\r",
									"        \"BienesServicios\",\r",
									"        \"CodObjetoSocial\",\r",
									"        \"VigenciaSociedad\",\r",
									"        \"CodNivelRiesgo\",\r",
									"        \"CodTamanoCompania\",\r",
									"        \"CatalogosDisponibles\",\r",
									"        \"CodMarca\",\r",
									"        \"CodProducto\",\r",
									"        \"Telefono2\",\r",
									"        \"Telefono3\",\r",
									"        \"LovSexo\",\r",
									"        \"CodClasificacionTributaria\",\r",
									"        \"PeriodoPago\",\r",
									"        \"ActividadEconomica\",\r",
									"        \"FormaPago\",\r",
									"        \"CodTipoPersona\",\r",
									"        \"Declarante\",\r",
									"        \"AgenteRetenedor\",\r",
									"        \"Autorretenedor\",\r",
									"        \"CodigoBanco\",\r",
									"        \"NombreBanco\",\r",
									"        \"CodTipoCuenta\",\r",
									"        \"NumeroCuenta\",\r",
									"        \"ValorMaximoPago\",\r",
									"        \"Activo\",\r",
									"        \"EsNivelGlobal\",\r",
									"        \"EmailAdicional\",\r",
									"        \"ScoringSarlaft\",\r",
									"        \"CodOrigenRecursos\",\r",
									"        \"CodActividadEconomica\",\r",
									"        \"CodSLFCanal\",\r",
									"        \"CodCiudad\",\r",
									"        \"FechaScoring\",\r",
									"        \"Sucursales\",\r",
									"        \"EsPEP\"\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/Proveedores/tipodocumento/5/documento/10536177",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"Proveedores",
								"tipodocumento",
								"5",
								"documento",
								"10536177"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consulta Lista de proveedores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Se busco el usuario por documento\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de proveedores obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: 'object',\r",
									"    properties: {\r",
									"        IdProveedor: { type: 'number'},\r",
									"        NomProveedor: { type: 'string'}, \r",
									"        CodTipoIdentificacion:  {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NumeroIdentificacion: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Contacto: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type : 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fax: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Direccion: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodPais: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodigoInternoProveedor: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        BienesServicios: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodObjetoSocial: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        VigenciaSociedad: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodNivelRiesgo: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTamanoCompania: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CatalogosDisponibles: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodMarca: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodProducto: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono2: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono3: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LovSexo: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodClasificacionTributaria: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        PeriodoPago: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ActividadEconomica: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FormaPago: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoPersona: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Declarante: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        AgenteRetenedor: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Autorretenedor: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodigoBanco: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FormaPago: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoPersona: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NombreBanco: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoCuenta: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NumeroCuenta: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ValorMaximoPago: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo: {\r",
									"            oneOff: [\r",
									"                 {type: 'boleean'},\r",
									"            \r",
									"            ]},\r",
									"        EsNivelGlobal:{\r",
									"            OneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EmailAdicional: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Sucursales: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodPais: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodOrigenRecursos: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneoff: [\r",
									"                 { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodSLFCanal: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ScoringSarlaft: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FechaScoring: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"        EsPEP:  {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                 { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [     \r",
									"        \"IdProveedor\",\r",
									"        \"NomProveedor\",\r",
									"        \"CodTipoIdentificacion\",\r",
									"        \"NumeroIdentificacion\",\r",
									"        \"Contacto\",\r",
									"        \"Telefono\",\r",
									"        \"Email\",\r",
									"        \"Fax\",\r",
									"        \"Direccion\",\r",
									"        \"CodPais\",\r",
									"        \"CodigoInternoProveedor\",\r",
									"        \"BienesServicios\",\r",
									"        \"CodObjetoSocial\",\r",
									"        \"VigenciaSociedad\",\r",
									"        \"CodNivelRiesgo\",\r",
									"        \"CodTamanoCompania\",\r",
									"        \"CatalogosDisponibles\",\r",
									"        \"CodMarca\",\r",
									"        \"CodProducto\",\r",
									"        \"Telefono2\",\r",
									"        \"Telefono3\",\r",
									"        \"LovSexo\",\r",
									"        \"CodClasificacionTributaria\",\r",
									"        \"PeriodoPago\",\r",
									"        \"ActividadEconomica\",\r",
									"        \"FormaPago\",\r",
									"        \"CodTipoPersona\",\r",
									"        \"Declarante\",\r",
									"        \"AgenteRetenedor\",\r",
									"        \"Autorretenedor\",\r",
									"        \"CodigoBanco\",\r",
									"        \"NombreBanco\",\r",
									"        \"CodTipoCuenta\",\r",
									"        \"NumeroCuenta\",\r",
									"        \"ValorMaximoPago\",\r",
									"        \"Activo\",\r",
									"        \"EsNivelGlobal\",\r",
									"        \"EmailAdicional\",\r",
									"        \"ScoringSarlaft\",\r",
									"        \"CodOrigenRecursos\",\r",
									"        \"CodActividadEconomica\",\r",
									"        \"CodSLFCanal\",\r",
									"        \"CodCiudad\",\r",
									"        \"FechaScoring\",\r",
									"        \"Sucursales\",\r",
									"        \"EsPEP\"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Administrador",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/Proveedores/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"Proveedores",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear proveedores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Proveedor creado\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        TipoIdentificacion: { type: 'string'},\r",
									"        NumeroIdentificacion: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Nombre: { type: 'string'},\r",
									"        Contacto: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fax: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Direccion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Pais: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo: {\r",
									"            oneOff: [\r",
									"                { type: 'boleean'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodOrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodSLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsNivelGlobal:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"    \"TipoIdentificacion\",\r",
									"    \"NumeroIdentificacion\",\r",
									"    \"Nombre\",\r",
									"    \"Contacto\",\r",
									"    \"Telefono\",\r",
									"    \"Email\",\r",
									"    \"Fax\",\r",
									"    \"Direccion\",\r",
									"    \"Pais\",\r",
									"    \"Activo\",\r",
									"    \"CodActividadEconomica\",\r",
									"    \"CodOrigenRecursos\",\r",
									"    \"CodSLFCanal\",\r",
									"    \"CodCiudad\",\r",
									"    \"EsNivelGlobal\",\r",
									"    \"Sucursales\"                                   \r",
									"\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"NomProveedor\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.globals.set(\"NumDocumento\", pm.variables.replaceIn('{{$randomBankAccount}}'));\r",
									"pm.globals.set(\"telefono\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n                          \"TipoIdentificacion\": \"Pasaporte\",\r\n                          \"NumeroIdentificacion\": {{NumDocumento}},\r\n                          \"Nombre\": \"{{NomProveedor}}\",\r\n                          \"Contacto\": \"{{telefono}}\",\r\n                          \"Telefono\": \"sample string 7\",\r\n                          \"Email\": \"sample string 8\",\r\n                          \"Fax\": \"sample string 9\",\r\n                          \"Direccion\": \"sample string 10\",\r\n                          \"Pais\": \"Colombia\",\r\n                          \"Activo\": \"1\",\r\n                          \"CodActividadEconomica\":2,\r\n                          \"CodOrigenRecursos\":2,\r\n                          \"CodSLFCanal\":17,\r\n                          \"CodCiudad\" : 1,\r\n                          \"EsNivelGlobal\":0,\r\n                          \"Sucursales\":\"1,3\"                               \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/proveedores/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"proveedores",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Modificar proveedores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Se espera Status Code 200, para Actualización Exitosa\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.StatusCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Proveedor actualizado.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        TipoIdentificacion: { type: 'string'},\r",
									"        NumeroIdentificacion: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Nombre: { type: 'string'},\r",
									"        Contacto: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fax: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Direccion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Pais: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo: {\r",
									"            oneOff: [\r",
									"                { type: 'boleean'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodOrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodSLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsNivelGlobal:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"    \"TipoIdentificacion\",\r",
									"    \"NumeroIdentificacion\",\r",
									"    \"Nombre\",\r",
									"    \"Contacto\",\r",
									"    \"Telefono\",\r",
									"    \"Email\",\r",
									"    \"Fax\",\r",
									"    \"Direccion\",\r",
									"    \"Pais\",\r",
									"    \"Activo\",\r",
									"    \"CodActividadEconomica\",\r",
									"    \"CodOrigenRecursos\",\r",
									"    \"CodSLFCanal\",\r",
									"    \"CodCiudad\",\r",
									"    \"EsNivelGlobal\",\r",
									"    \"Sucursales\"                                   \r",
									"\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": ""
							},
							{
								"key": "Authorization",
								"value": "48dd0918-7f09-4288-8b16-4d7b106220ee-Soporte482N",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n                          \"TipoIdentificacion\": \"Pasaporte\",\r\n                          \"NumeroIdentificacion\": {{NumDocumento}},\r\n                          \"Nombre\": \"{{NomProveedor}}\",\r\n                          \"Contacto\": \"{{telefono}}\",\r\n                          \"Telefono\": \"sample string 7\",\r\n                          \"Email\": \"sample string 8\",\r\n                          \"Fax\": \"sample string 9\",\r\n                          \"Direccion\": \"sample string 10\",\r\n                          \"Pais\": \"Colombia\",\r\n                          \"Activo\": \"1\",\r\n                          \"CodActividadEconomica\":1,\r\n                          \"CodOrigenRecursos\":1,\r\n                          \"CodSLFCanal\":17,\r\n                          \"CodCiudad\" : 1,\r\n                          \"EsNivelGlobal\":0,\r\n                          \"Sucursales\":\"1,1\"                               \r\n}"
						},
						"url": {
							"raw": "{{URL}}/api/Proveedores/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"Proveedores",
								""
							]
						},
						"description": "Modificación de registros"
					},
					"response": []
				},
				{
					"name": "RelacionTercero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Tercero relacionado agregado correctamente\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdTercero: { type: 'number'},\r",
									"        IdContraparte: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'} \r",
									"            ]},\r",
									"        Porcentaje: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        TipoContraparte: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'} \r",
									"            ]},\r",
									"        TipoRelacion: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'} \r",
									"            ]},\r",
									"\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        \"IdTercero\",\r",
									"        \"IdContraparte\",\r",
									"        \"Porcentaje\",\r",
									"        \"TipoContraparte\", \r",
									"        \"TipoRelacion\"\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const postId = Math.floor((Math.random() *10)+1)\r",
									"\r",
									"pm.globals.set('postId:', postId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"IdTercero\": 3,\r\n    \"Porcentaje\": 30,\r\n    \"TipoRelacion\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/Proveedores/1/Tercero",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"Proveedores",
								"1",
								"Tercero"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar relacion Tercero",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Tercero relacionado eliminado correctamente\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        CodTipoIdentificacion: { type: 'number'},\r",
									"        NumeroIdentificacion: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        NomProveedor: { type: 'string'},\r",
									"        Contacto: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fax: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Direccion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodPais: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo: {\r",
									"            oneOff: [\r",
									"                { type: 'boleean'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodOrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodSLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsNivelGlobal:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"    \"CodTipoIdentificacion\",\r",
									"    \"NumeroIdentificacion\",\r",
									"    \"NomProveedor\",\r",
									"    \"Contacto\",\r",
									"    \"Telefono\",\r",
									"    \"Email\",\r",
									"    \"Fax\",\r",
									"    \"Direccion\",\r",
									"    \"CodPais\",\r",
									"    \"Activo\",\r",
									"    \"CodActividadEconomica\",\r",
									"    \"CodOrigenRecursos\",\r",
									"    \"CodSLFCanal\",\r",
									"    \"CodCiudad\",\r",
									"    \"EsNivelGlobal\",\r",
									"    \"Sucursales\"                                   \r",
									"\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/Proveedores/1/Tercero/3/TipoRelacion/3",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"Proveedores",
								"1",
								"Tercero",
								"3",
								"TipoRelacion",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener Proveedor por documento Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Se busco el usuario por documento\", function () {\r",
									"pm.globals.set(\"variable_key\", \"variable_value\");\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Proveedor obtenido exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdProveedor: { type: 'number'},\r",
									"        NomProveedor: { type: 'string'}, \r",
									"        CodTipoIdentificacion: { type: 'number'},\r",
									"        NumeroIdentificacion: { type: 'string'},\r",
									"        Contacto: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type : 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fax: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Direccion: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodPais: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodigoInternoProveedor: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        BienesServicios: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodObjetoSocial: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        VigenciaSociedad: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodNivelRiesgo: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTamanoCompania: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CatalogosDisponibles: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodMarca: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodProducto: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono2: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono3: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LovSexo: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodClasificacionTributaria: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        PeriodoPago: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ActividadEconomica: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FormaPago: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoPersona: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Declarante: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        AgenteRetenedor: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Autorretenedor: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodigoBanco: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FormaPago: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoPersona: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NombreBanco: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoCuenta: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NumeroCuenta: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ValorMaximoPago: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo: {\r",
									"            oneOff: [\r",
									"                 {type: 'boleean'},\r",
									"            \r",
									"            ]},\r",
									"        EsNivelGlobal:{\r",
									"            OneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EmailAdicional: {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Sucursales: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodPais: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodOrigenRecursos: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneoff: [\r",
									"                 { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodSLFCanal: {\r",
									"            oneoff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ScoringSarlaft: {\r",
									"                type: 'number'\r",
									"           },\r",
									"        FechaScoring: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"        EsPEP:  {\r",
									"            oneoff: [\r",
									"                { type: 'string'},\r",
									"                 { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [     \r",
									"        \"IdProveedor\",\r",
									"        \"NomProveedor\",\r",
									"        \"CodTipoIdentificacion\",\r",
									"        \"NumeroIdentificacion\",\r",
									"        \"Contacto\",\r",
									"        \"Telefono\",\r",
									"        \"Email\",\r",
									"        \"Fax\",\r",
									"        \"Direccion\",\r",
									"        \"CodPais\",\r",
									"        \"CodigoInternoProveedor\",\r",
									"        \"BienesServicios\",\r",
									"        \"CodObjetoSocial\",\r",
									"        \"VigenciaSociedad\",\r",
									"        \"CodNivelRiesgo\",\r",
									"        \"CodTamanoCompania\",\r",
									"        \"CatalogosDisponibles\",\r",
									"        \"CodMarca\",\r",
									"        \"CodProducto\",\r",
									"        \"Telefono2\",\r",
									"        \"Telefono3\",\r",
									"        \"LovSexo\",\r",
									"        \"CodClasificacionTributaria\",\r",
									"        \"PeriodoPago\",\r",
									"        \"ActividadEconomica\",\r",
									"        \"FormaPago\",\r",
									"        \"CodTipoPersona\",\r",
									"        \"Declarante\",\r",
									"        \"AgenteRetenedor\",\r",
									"        \"Autorretenedor\",\r",
									"        \"CodigoBanco\",\r",
									"        \"NombreBanco\",\r",
									"        \"CodTipoCuenta\",\r",
									"        \"NumeroCuenta\",\r",
									"        \"ValorMaximoPago\",\r",
									"        \"Activo\",\r",
									"        \"EsNivelGlobal\",\r",
									"        \"EmailAdicional\",\r",
									"        \"ScoringSarlaft\",\r",
									"        \"CodOrigenRecursos\",\r",
									"        \"CodActividadEconomica\",\r",
									"        \"CodSLFCanal\",\r",
									"        \"CodCiudad\",\r",
									"        \"FechaScoring\",\r",
									"        \"Sucursales\",\r",
									"        \"EsPEP\"\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/Proveedores/tipodocumento/5/documento/10536177",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"Proveedores",
								"tipodocumento",
								"5",
								"documento",
								"10536177"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Grupo Usuario",
			"item": [
				{
					"name": "Obtener grupos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de grupos obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"array\",\r",
									"    properties: {\r",
									"        IdGrupo: { type: 'number'},\r",
									"        NomGrupo: { type: 'string'},\r",
									"        Descripcion:{\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdGrupo',\r",
									"        'NomGrupo',\r",
									"        'Descripcion'\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/grupousuario/1",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"grupousuario",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar Grupo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de grupos obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"array\",\r",
									"    properties: {\r",
									"        IdGrupo: { type: 'number'},\r",
									"        NomGrupo: { type: 'string'},\r",
									"        Descripcion:{\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdGrupo',\r",
									"        'NomGrupo',\r",
									"        'Descripcion'\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/grupousuario/{{PostId:}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"grupousuario",
								"{{PostId:}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "agregar grupo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Grupo asignado exitosamente.\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/grupoUsuario/1/Agregar/{{postId:}}",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"grupoUsuario",
								"1",
								"Agregar",
								"{{postId:}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remover Grupo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Grupo removido exitosamente.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}api/grupoUsuario/1/remover/{{postId:}}",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"grupoUsuario",
								"1",
								"remover",
								"{{postId:}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Listado Maestro",
			"item": [
				{
					"name": "Listado Maestro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de documentos obtenida exitosamente.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/listadomaestro/[pruebaQA]",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"listadomaestro",
								"[pruebaQA]"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Proceso",
			"item": [
				{
					"name": "Obtener procesos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de procesos obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdProceso: { type: 'number'},\r",
									"        NomProceso: {\r",
									"            oneOff: [\r",
									"                    { type: 'string'},\r",
									"                    { type: 'number'}\r",
									"            ]},\r",
									"        NomProceso: {\r",
									"            oneOff: [\r",
									"                    { type: 'null'},\r",
									"                    { type: 'number'}\r",
									"            ]},\r",
									"        Activo: { type: 'number'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdProceso',\r",
									"        'NomProceso',\r",
									"        'Sigla',\r",
									"        'Activo'\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/procesos/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"procesos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear proceso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"NomProceso\", pm.variables.replaceIn('{{$randomFirstName}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Grupo creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Proceso creado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        NomProceso: { type: 'string'},\r",
									"        Sigla: { type: 'string'},\r",
									"\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'NomProceso',\r",
									"        'Sigla'\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NomProceso\":\"{{NomProceso}}\",\r\n\"Sigla\":\"PQA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/procesos/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"procesos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar un proceso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Grupo creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Proceso fue actualizado.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdProceso: { type: 'number'},\r",
									"        NomProceso: { type: 'string'},\r",
									"        Sigla: { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdProceso',\r",
									"        'NomProceso',\r",
									"        'Sigla',\r",
									"        'Activo'\r",
									"    ]}\r",
									"\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NomProceso\":\"{{NomProceso}}\",\r\n\"Sigla\":\"PCA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/procesos/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"procesos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener usuarios por procesos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Grupo creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de usuarios del proceso obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdUsuario: { type: 'number'},\r",
									"       NomUsuario: { type: 'string'},\r",
									"       CodCargo: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        Cargo: {\r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        Firma: {\r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        CodOficina: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        Oficina: {\r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"         NumDocumento: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        Clave: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        Descripcion: {\r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        Email: {\r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        CodArea: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        Area: {\r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        CodUsuarioJefe: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        EsJefe: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        EsAdmin: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        EsAuditor: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        EsCalidad: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        CodCiudad: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        Ciudad: {\r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        Login: {\r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        SamAccountName: {\r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        Activo: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"        CodIdioma: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"          Identificacion: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"          Fechanacimiento:{\r",
									"              oneOff:[\r",
									"           { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"            ]},\r",
									"          CodCentroCosto: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"          CentroCosto: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"          CodTipoIdentificacion: {\r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"          EsEvaluador: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"          EsFuncionario: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"          EsConsulta: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"          NomCargo: {\r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"          Promedio: {\r",
									"          oneOff: [\r",
									"              { type: 'number'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdUsuario',\r",
									"        'NomUsuario',\r",
									"        'CodCargo',\r",
									"        'Cargo',\r",
									"        'Firma',\r",
									"        'CodOficina',\r",
									"        'Oficina',\r",
									"        'NumDocumento',\r",
									"        'Clave',\r",
									"        'Descripcion',\r",
									"        'Email',\r",
									"        'CodArea',\r",
									"        'Area',\r",
									"        'CodUsuarioJefe',\r",
									"        'EsJefe',\r",
									"        'EsAdmin',\r",
									"        'EsAuditor',\r",
									"        'EsCalidad',\r",
									"        'CodCiudad',\r",
									"        'Ciudad',\r",
									"        'Login',\r",
									"        'SamAccountName',\r",
									"        'Activo',\r",
									"        'CodIdioma',\r",
									"        'Identificacion',\r",
									"        'Fechanacimiento',\r",
									"        'CodCentroCosto',\r",
									"        'CentroCosto',\r",
									"        'CodTipoIdentificacion',\r",
									"        'EsEvaluador',\r",
									"        'EsFuncionario',\r",
									"        'EsConsulta',\r",
									"        'NomCargo',\r",
									"        'Promedio'\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/procesos/1/obtenerUsuarios",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"procesos",
								"1",
								"obtenerUsuarios"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Objetivo",
			"item": [
				{
					"name": "Obtener objetivo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Grupo creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de objetivoss obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdObjetivo: { type: 'number'},\r",
									"        NomObjetivo: { type: 'string'},\r",
									"        CodTipoObjetivo: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodObjetivo: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Minimo:  {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Esperado:  {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Optimo:  {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo:  {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodClaseObjetivo:  {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        'IdObjetivo',\r",
									"        'NomObjetivo',\r",
									"        'CodTipoObjetivo',\r",
									"        'CodObjetivo',\r",
									"        'Minimo',\r",
									"        'Esperado',\r",
									"        'Optimo',\r",
									"        'Activo',\r",
									"        'CodClaseObjetivo'\r",
									"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/objetivo/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"objetivo",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Oficina",
			"item": [
				{
					"name": "Obtener Oficina",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Grupo creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de oficinas obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"       IdOficina: { type: 'number'},\r",
									"       NomOficina: {type: 'string'},\r",
									"       CodCiudad: {\r",
									"           oneOff: [\r",
									"            { type: 'number'},\r",
									"            { type: 'null'}\r",
									"       ]},\r",
									"       CodOficina: {\r",
									"           oneOff: [\r",
									"            { type: 'number'},\r",
									"            { type: 'null'}\r",
									"       ]},\r",
									"       NomOficinaPadre: {\r",
									"           oneOff: [\r",
									"            { type: 'string'},\r",
									"            { type: 'null'}\r",
									"       ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [\r",
									"        \"IdOficina\",\r",
									"        \"NomOficina\",\r",
									"        \"CodCiudad\",\r",
									"        \"CodOficina\",\r",
									"        \"NomOficinaPadre\"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/Oficina/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"Oficina",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Origen de Recursos",
			"item": [
				{
					"name": "Obtener origen de recursos",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Grupo creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de origen de recursos obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_OrigenRecursos: { type: 'number'},\r",
									"        NomOrigenRecursos: {type: 'string'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [       \r",
									"        'Id_OrigenRecursos',\r",
									"        'NomOrigenRecursos'\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/OrigenRecursos/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"OrigenRecursos",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Paises",
			"item": [
				{
					"name": "Obtener Paises",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Grupo creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de países obtenida\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type : 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdPais: { type: 'number'},\r",
									"        NomPais: { type: 'string'},\r",
									"        IdBasilea: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [             \r",
									"        'IdPais',\r",
									"        'NomPais',\r",
									"        'IdBasilea'\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/paises/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"paises",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Plantilla Documental",
			"item": [
				{
					"name": "Obtener plantilla documental",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Grupo creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de plantillas obtenida exitosamente.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/PlantillaDocumental/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"PlantillaDocumental",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Accionista",
			"item": [
				{
					"name": "Crear Accionistas",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"NomAccionista\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"\r",
									"pm.globals.set(\"NumDocumento\", pm.variables.replaceIn('{{$randomBankAccount}}'));\r",
									"\r",
									"         \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accionista creado exitosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Accionista ha sido creado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_Accionista: { type: 'number'},\r",
									"        NomAccionista: { type: 'string'},\r",
									"        ScoringSarlaft: {type: 'number'},\r",
									"        Particion: { type: 'number'},\r",
									"        NumDocumento: { type: 'string'},\r",
									"        Activo: { type: 'boolean'},\r",
									"        Pais: { type: 'string'},\r",
									"        Ciudad: { type: 'string'},\r",
									"        OrigenRecursos: { type: 'string'},\r",
									"        ActividadEconomica: { type: 'string'},\r",
									"        SLFCanal: { type: 'string'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"Id_Accionista\",         \r",
									"        \"NomAccionista\",\r",
									"        \"ScoringSarlaft\",\r",
									"        \"Particion\",\r",
									"        \"NumDocumento\",\r",
									"        \"Activo\",\r",
									"        \"Pais\",\r",
									"        \"Ciudad\",\r",
									"        \"OrigenRecursos\",\r",
									"        \"ActividadEconomica\",\r",
									"        \"SLFCanal\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWxleDU6MTIzNDU=",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"NomAccionista\":\"{{NomAccionista}}\",\r\n    \"NumDocumento\":\"{{NumDocumento}}\",\r\n    \"ScoringSarlaft\":2,\r\n    \"Particion\":1,\r\n    \"Activo\":1,\r\n    \"Pais\":\"Colombia\",\r\n    \"Ciudad\":\"BOGOTÁ D.C.\",\r\n    \"OrigenRecursos\":\"Ahorros\",\r\n    \"ActividadEconomica\":\"CONSTRUCCION\",\r\n    \"SLFCanal\":\"Inversionista (Accionista)\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/accionistas/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"accionistas",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar Accionistas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accionista actualizado correctamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Accionista ha sido actualizado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_Accionista: { type: 'number'},\r",
									"        NomAccionista: { type: 'string'},\r",
									"        ScoringSarlaft: {type: 'number'},\r",
									"        Particion: { type: 'number'},\r",
									"        NumDocumento: { type: 'string'},\r",
									"        Activo: { type: 'boolean'},\r",
									"        Pais: { type: 'string'},\r",
									"        Ciudad: { type: 'string'},\r",
									"        OrigenRecursos: { type: 'string'},\r",
									"        ActividadEconomica: { type: 'string'},\r",
									"        SLFCanal: { type: 'string'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"Id_Accionista\",         \r",
									"        \"NomAccionista\",\r",
									"        \"ScoringSarlaft\",\r",
									"        \"Particion\",\r",
									"        \"NumDocumento\",\r",
									"        \"Activo\",\r",
									"        \"Pais\",\r",
									"        \"Ciudad\",\r",
									"        \"OrigenRecursos\",\r",
									"        \"ActividadEconomica\",\r",
									"        \"SLFCanal\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "ApiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"NomAccionista\":\"{{NomAccionista}}\",\r\n    \"NumDocumento\":{{NumDocumento}},\r\n    \"ScoringSarlaft\":2,\r\n    \"Particion\":3,\r\n    \"Activo\":1,\r\n    \"Pais\":\"Colombia\",\r\n    \"Ciudad\":\"BOGOTÁ D.C.\",\r\n    \"OrigenRecursos\":\"Corriente\",\r\n    \"ActividadEconomica\":\"CONSTRUCCION\",\r\n    \"SLFCanal\":\"Inversionista (Accionista)\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/accionistas/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"accionistas",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Relación tercero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Tercero asociado correctamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Tercero relacionado agregado correctamente\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdTercero: { type: 'number'},\r",
									"        IdContraparte: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Porcentaje: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TipoContraparte: { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TipoRelacion: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"IdTercero\",\r",
									"        \"Porcentaje\",\r",
									"        \"TipoContraparte\",\r",
									"        \"TipoRelacion\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"IdTercero\":12,\r\n    \"Porcentaje\": 30,\r\n    \"TipoRelacion\": 3\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/accionistas/1/Tercero",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"accionistas",
								"1",
								"Tercero"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar relación tercero",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Tercero Borrado con Exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Tercero relacionado eliminado correctamente\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_Tercero: { type: 'number'},\r",
									"        NomAccionista: { type: 'string'},\r",
									"        Particion: { type: 'number'},\r",
									"        NumDocumento: { type: 'string'},\r",
									"        Activo: { type: 'boolean'},\r",
									"        CodPais: { type: 'number'},\r",
									"        CodCiudad: { type: 'number'},\r",
									"        CodOrigenRecursos: { type: 'number'},\r",
									"        CodActividadEconomica: { type: 'number'},\r",
									"        CodSLFCanal: { type: 'number'},\r",
									"        ScoringSarlaft: { type: 'number'},\r",
									"        FechaScoring: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"        EsPEP: {\r",
									"             type: 'boolean'\r",
									"        },\r",
									"\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"Id_Accionista\",\r",
									"        \"NomAccionista\",\r",
									"        \"Particion\",\r",
									"        \"NumDocumento\",\r",
									"        \"Activo\",\r",
									"        \"CodPais\",\r",
									"        \"CodCiudad\",\r",
									"        \"CodOrigenRecursos\",\r",
									"        \"CodActividadEconomica\",\r",
									"        \"CodSLFCanal\",\r",
									"        \"ScoringSarlaft\",\r",
									"        \"FechaScoring\",\r",
									"        \"EsPEP\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/accionistas/1/Tercero/12/TipoRelacion/3",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"accionistas",
								"1",
								"Tercero",
								"12",
								"TipoRelacion",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener Accionistas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"lista de accionista obtenida exitosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de accionistas obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"           type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_Accionista: { type: 'number'},\r",
									"        NomAccionista: { type: 'string'},\r",
									"        ScoringSarlaft: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NumDocumento: { type: 'string'},\r",
									"        Activo: {\r",
									"            oneOff: [\r",
									"                { type: 'boolean'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Pais: { type: 'string'},\r",
									"        Ciudad: { type: 'string'},\r",
									"        OrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ActividadEconomica:  {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"     \"Id_Accionista\",\r",
									"     \"NomAccionista\",\r",
									"     \"ScoringSarlaft\",\r",
									"     \"NumDocumento\",\r",
									"     \"Activo\",\r",
									"     \"Pais\",\r",
									"     \"Ciudad\",\r",
									"     \"OrigenRecursos\",\r",
									"     \"ActividadEconomica\",\r",
									"     \"SLFCanal\"\r",
									"    ]}\r",
									"}\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/accionistas/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"accionistas",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "12345",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Actividad Económica",
			"item": [
				{
					"name": "Obtener Actividad Economica",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"lista de accionista obtenida exitosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de actividades economicas obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"           type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_ActividadEconomica: { type: 'number'},\r",
									"        NomActividadEconomica: { type: 'string'},\r",
									"        IdBasilea: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null' }\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"     \"Id_ActividadEconomica\",\r",
									"     \"NomActividadEconomica\",\r",
									"     \"IdBasilea\"\r",
									"    ]}\r",
									"}\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/ActividadEconomica/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"ActividadEconomica",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Area",
			"item": [
				{
					"name": "Obtener Area",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de Areas obtenida correctamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de areas obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"           type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"       IdArea: { type: 'number'},\r",
									"       NomArea: { type: 'string'},\r",
									"       Sigla: { type: 'string'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"IdArea\",\r",
									"        \"NomArea\",\r",
									"        \"Sigla\"\r",
									"    ]}\r",
									"}\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/areas/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"areas",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear Area",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"area\", pm.variables.replaceIn('{{$randomJobArea}}'));\r",
									"pm.globals.set(\"sigla\", pm.variables.replaceIn('{{$randomCurrencyCode}}'));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Area creada exitosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Area ha sido creada exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"       IdArea: { type: 'number'},\r",
									"       NomArea: { type: 'string'},\r",
									"       Sigla: { type: 'string'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"IdArea\",\r",
									"        \"NomArea\",\r",
									"        \"Sigla\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NomArea\":\"{{area}}\",\r\n\"Sigla\":\"{{sigla}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/areas/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"areas",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar por Sigla Area",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Area editada correctamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Area ha sido actualizada exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"       IdArea: { type: 'number'},\r",
									"       NomArea: { type: 'string'},\r",
									"       Sigla: { type: 'string'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"IdArea\",\r",
									"        \"NomArea\",\r",
									"        \"Sigla\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NomArea\":\"QADiego\",\r\n\"Sigla\":\"{{sigla}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/areas//ActualizarSigla",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"areas",
								"",
								"ActualizarSigla"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar por Nombre Area",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El Area ha sido actualizada exitosamente.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Area ha sido actualizada exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"       IdArea: { type: 'number'},\r",
									"       NomArea: { type: 'string'},\r",
									"       Sigla: { type: 'string'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"IdArea\",\r",
									"        \"NomArea\",\r",
									"        \"Sigla\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NomArea\":\"Compras\",\r\n\"Sigla\":\"PruebaQAQA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/areas/ActualizarNomArea",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"areas",
								"ActualizarNomArea"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "12345",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Ausentismo",
			"item": [
				{
					"name": "Obtener Listado Ausentismo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de Ausentismo obtenida correctamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Ausentismo obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"        items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"      Trabajador: { type: 'string'},\r",
									"      Diagnostico: { type: 'string'},\r",
									"      TipodeAusentismo: { type: 'string'},\r",
									"      Observaciones: { \r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"      FechaFinal: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"      FechadeInicio: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"        HorasdeAusencia: {type: 'number'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"     \"Trabajador\",\r",
									"     \"Diagnostico\",\r",
									"     \"TipodeAusentismo\",\r",
									"     \"Observaciones\",\r",
									"     \"FechaFinal\",\r",
									"     \"FechadeInicio\",\r",
									"     \"HorasdeAusencia\"\r",
									"    ]}\r",
									"    }\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/ausentismos/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"ausentismos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar Ausentismo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ausentismo actualizado correctamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"Trabajador\":\"{{Nombre}}\",\r\n\"TipodeAusentismo\":\"Calamidad Domestica\",\r\n\"FechadeInicio\":\"{{FechaAccidente}}\",\r\n\"FechaFinal\":\"2025-02-03T09:34:00\",\r\n\"Diagnostico\":\"\",\r\n\"Observaciones\":\"Observación del Ausentismo por Enfermedad Común\",\r\n\"Horasdeausencia\":\"31\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/ausentismos/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"ausentismos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear Ausentismo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de Ausentismo obtenida correctamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El  registro de ausentismo ha sido creado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"      Trabajador: { type: 'string'},\r",
									"      Diagnostico: { type: 'string'},\r",
									"      TipodeAusentismo: { type: 'string'},\r",
									"      Observaciones: { \r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},\r",
									"      FechaFinal: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"      FechadeInicio: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"}\r",
									"           ]},\r",
									"        HorasdeAusencia: {type: 'number'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"     \"Trabajador\",\r",
									"     \"Diagnostico\",\r",
									"     \"TipodeAusentismo\",\r",
									"     \"Observaciones\",\r",
									"     \"FechaFinal\",\r",
									"     \"FechadeInicio\",\r",
									"     \"HorasdeAusencia\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var fechaiso8601 = 'YYYY-MM-DDTHH:mm:ss';\r",
									"var fechaactual = moment().format(fechaiso8601);\r",
									"pm.environment.set(\"FechaAccidente\", fechaactual);\r",
									"pm.globals.set(\"FechaAccidente\", fechaactual);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Trabajador\":\"{{Nombre}}\",\r\n    \"Diagnostico\":\"\",\r\n    \"TipodeAusentismo\":\"Calamidad Domestica\",\r\n    \"Observaciones\":\"Ninguna\",\r\n    \"FechaFinal\":\"2025-02-03T09:34:00\",\r\n    \"FechadeInicio\":\"{{FechaAccidente}}\",\r\n    \"HorasdeAusencia\":\"9\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/ausentismos/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"ausentismos",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Centros de Costos",
			"item": [
				{
					"name": "Obtener Centro de Costos",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Codigo de estatus es 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de centros de costos obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"        items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"      Id_CentroCosto: { type: 'number'},\r",
									"      NomCentroCosto: { type: 'string'},\r",
									"      codigo: { type: 'string'},\r",
									"      Activo: { type: 'boolean'},\r",
									"      CodAreaDA: {\r",
									"          oneOff: [\r",
									"              { type: 'string'},\r",
									"              { type: 'null'}\r",
									"          ]},    \r",
									"     \r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"     \"Id_CentroCosto\",\r",
									"     \"NomCentroCosto\",\r",
									"     \"Codigo\",\r",
									"     \"Activo\",\r",
									"     \"CodAreaDA\"\r",
									"    ]}\r",
									"    }\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{URL}}/api/CentroCosto/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"CentroCosto",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cliente",
			"item": [
				{
					"name": "Obtener clientes Paginación 0 al 20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Clientes buscado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de clientes obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"        items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdCliente: { type: 'number'},\r",
									"        Nombredelcliente: { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"        Celular:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ActividadEconomica:{\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Ciudad: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Sector: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Tipocliente: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TipoDocIdentidad: {\r",
									"            type: 'string'\r",
									"        },\r",
									"        Contacto:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Direccion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Documento: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fax: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FechaActualizacion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        FechaCreacion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        URL: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        OrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodOrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodSLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ScoringSarlaft: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        EsNivelGlobal: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"     \r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"    \"IdCliente\",\r",
									"    \"Nombredelcliente\",\r",
									"    \"Activo\",\r",
									"    \"Celular\",\r",
									"    \"ActividadEconomica\",\r",
									"    \"Ciudad\",\r",
									"    \"Sector\",\r",
									"    \"Tipocliente\",\r",
									"    \"TipoDocIdentidad\",\r",
									"    \"Contacto\",\r",
									"    \"Direccion\",\r",
									"    \"Documento\",\r",
									"    \"Email\",\r",
									"    \"Fax\",\r",
									"    \"FechaActualizacion\",\r",
									"    \"FechaCreacion\",\r",
									"    \"Telefono\",\r",
									"    \"URL\",\r",
									"    \"OrigenRecursos\",\r",
									"    \"CodOrigenRecursos\",\r",
									"    \"SLFCanal\",\r",
									"    \"CodSLFCanal\",\r",
									"    \"CodActividadEconomica\",\r",
									"    \"ScoringSarlaft\",\r",
									"    \"EsNivelGlobal\",\r",
									"    \"Sucursales\"\r",
									"    ]}\r",
									"    }\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/Clientes?RegistroActual=0&TamanoPagina=20",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"Clientes"
							],
							"query": [
								{
									"key": "RegistroActual",
									"value": "0"
								},
								{
									"key": "TamanoPagina",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener clientes Paginación 21 al 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Clientes buscado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de clientes obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"        items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdCliente: { type: 'number'},\r",
									"        Nombredelcliente: { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"        Celular:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ActividadEconomica:{\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Ciudad: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Sector: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Tipocliente: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TipoDocIdentidad: {\r",
									"            type: 'string'\r",
									"        },\r",
									"        Contacto:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Direccion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Documento: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fax: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FechaActualizacion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        FechaCreacion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        URL: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        OrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodOrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodSLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ScoringSarlaft: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        EsNivelGlobal: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"     \r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"    \"IdCliente\",\r",
									"    \"Nombredelcliente\",\r",
									"    \"Activo\",\r",
									"    \"Celular\",\r",
									"    \"ActividadEconomica\",\r",
									"    \"Ciudad\",\r",
									"    \"Sector\",\r",
									"    \"Tipocliente\",\r",
									"    \"TipoDocIdentidad\",\r",
									"    \"Contacto\",\r",
									"    \"Direccion\",\r",
									"    \"Documento\",\r",
									"    \"Email\",\r",
									"    \"Fax\",\r",
									"    \"FechaActualizacion\",\r",
									"    \"FechaCreacion\",\r",
									"    \"Telefono\",\r",
									"    \"URL\",\r",
									"    \"OrigenRecursos\",\r",
									"    \"CodOrigenRecursos\",\r",
									"    \"SLFCanal\",\r",
									"    \"CodSLFCanal\",\r",
									"    \"CodActividadEconomica\",\r",
									"    \"ScoringSarlaft\",\r",
									"    \"EsNivelGlobal\",\r",
									"    \"Sucursales\"\r",
									"    ]}\r",
									"    }\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/Clientes?RegistroActual=21&TamanoPagina=100",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"Clientes"
							],
							"query": [
								{
									"key": "RegistroActual",
									"value": "21"
								},
								{
									"key": "TamanoPagina",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear cliente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"NomCliente\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.globals.set(\"NumDocumento\", pm.variables.replaceIn('{{$randomBankAccount}}'));\r",
									"pm.globals.set(\"telefono\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cliente Creado existosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Cliente ha sido creado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdCliente: { type: 'number'},\r",
									"        Nombredelcliente: { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"        Celular:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ActividadEconomica:{\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Ciudad: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Sector: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Tipocliente: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TipoDocIdentidad: {\r",
									"            type: 'string'\r",
									"        },\r",
									"        Contacto:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Direccion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Documento: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fax: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FechaActualizacion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        FechaCreacion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        URL: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        OrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodOrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodSLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ScoringSarlaft: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsNivelGlobal: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"     \r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"    \"IdCliente\",\r",
									"    \"Nombredelcliente\",\r",
									"    \"Activo\",\r",
									"    \"Celular\",\r",
									"    \"ActividadEconomica\",\r",
									"    \"Ciudad\",\r",
									"    \"Sector\",\r",
									"    \"Tipocliente\",\r",
									"    \"TipoDocIdentidad\",\r",
									"    \"Contacto\",\r",
									"    \"Direccion\",\r",
									"    \"Documento\",\r",
									"    \"Email\",\r",
									"    \"Fax\",\r",
									"    \"FechaActualizacion\",\r",
									"    \"FechaCreacion\",\r",
									"    \"Telefono\",\r",
									"    \"URL\",\r",
									"    \"OrigenRecursos\",\r",
									"    \"CodOrigenRecursos\",\r",
									"    \"SLFCanal\",\r",
									"    \"CodSLFCanal\",\r",
									"    \"CodActividadEconomica\",\r",
									"    \"ScoringSarlaft\",\r",
									"    \"EsNivelGlobal\",\r",
									"    \"Sucursales\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Nombredelcliente\":\"{{NomCliente}}\",\r\n    \"TipoDocIdentidad\":\"NIT\",\r\n    \"Documento\":\"{{NumDocumento}}\",\r\n    \"Contacto\":\"Carolina Gomez\",\r\n    \"Activo\":1,\r\n    \"Ciudad\":\"BOGOTÁ D.C.\",\r\n    \"Email\":\"cliente@cliente.com\",\r\n    \"Sector\":\"Privado\",\r\n    \"Direccion\":null,\r\n    \"TipoCliente\":null, \r\n    \"Celular\":\"{{telefono}}\",                            \r\n    \"Telefono\":null,\r\n    \"Fax\":null,\r\n    \"URL\":null,    \r\n    \"CodActividadEconomica\":1,\r\n    \"CodOrigenRecursos\":1,\r\n    \"CodSLFCanal\":1,\r\n    \"FechaCreacion\":\"2020/05/12\",\r\n    \"EsNivelGlobal\":1,\r\n    \"Sucursales\":\"\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/clientes/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"clientes",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar cliente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"NomCliente\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cliente editado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Cliente ha sido actualizado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdCliente: { type: 'number'},\r",
									"        Nombredelcliente: { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"        Celular:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ActividadEconomica:{\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Ciudad: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Sector: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Tipocliente: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TipoDocIdentidad: {\r",
									"            type: 'string'\r",
									"        },\r",
									"        Contacto:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Direccion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Documento: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fax: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FechaActualizacion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        FechaCreacion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        URL: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        OrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodOrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodSLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ScoringSarlaft: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsNivelGlobal: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"     \r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"    \"IdCliente\",\r",
									"    \"Nombredelcliente\",\r",
									"    \"Activo\",\r",
									"    \"Celular\",\r",
									"    \"ActividadEconomica\",\r",
									"    \"Ciudad\",\r",
									"    \"Sector\",\r",
									"    \"Tipocliente\",\r",
									"    \"TipoDocIdentidad\",\r",
									"    \"Contacto\",\r",
									"    \"Direccion\",\r",
									"    \"Documento\",\r",
									"    \"Email\",\r",
									"    \"Fax\",\r",
									"    \"FechaActualizacion\",\r",
									"    \"FechaCreacion\",\r",
									"    \"Telefono\",\r",
									"    \"URL\",\r",
									"    \"OrigenRecursos\",\r",
									"    \"CodOrigenRecursos\",\r",
									"    \"SLFCanal\",\r",
									"    \"CodSLFCanal\",\r",
									"    \"CodActividadEconomica\",\r",
									"    \"ScoringSarlaft\",\r",
									"    \"EsNivelGlobal\",\r",
									"    \"Sucursales\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apikey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Nombredelcliente\":\"{{NomCliente}}\",\r\n    \"TipoDocIdentidad\":\"NIT\",\r\n    \"Documento\":\"{{NumDocumento}}\",\r\n    \"Contacto\":\"Carolina Gomez\",\r\n    \"Activo\":1,\r\n    \"Ciudad\":\"BOGOTÁ D.C.\",\r\n    \"Email\":\"cliente@cliente.com\",\r\n    \"Sector\":\"Privado\",\r\n    \"Direccion\":null,\r\n    \"TipoCliente\":null, \r\n    \"Celular\":\"{{telefono}}\",                            \r\n    \"Telefono\":null,\r\n    \"Fax\":null,\r\n    \"URL\":null,    \r\n    \"CodActividadEconomica\":1,\r\n    \"CodOrigenRecursos\":1,\r\n    \"CodSLFCanal\":1,\r\n    \"FechaCreacion\":\"2020/05/12\",\r\n    \"FechaActualizacion\":\"2021/05/12\",\r\n    \"EsNivelGlobal\":0,\r\n    \"Sucursales\":\"1,3\"                                    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/clientes/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"clientes",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener Cliente por documento",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Clientes buscado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Cliente obtenido exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdCliente: { type: 'number'},\r",
									"        Nombredelcliente: { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"        Celular:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ActividadEconomica:{\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Ciudad: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Sector: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Tipocliente: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TipoDocIdentidad: {\r",
									"            type: 'string'\r",
									"        },\r",
									"        Contacto:{\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Direccion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Documento: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fax: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        FechaActualizacion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        FechaCreacion: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        URL: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        OrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodOrigenRecursos: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        SLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodSLFCanal: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodActividadEconomica: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ScoringSarlaft: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        EsNivelGlobal: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Sucursales: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"     \r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"    \"IdCliente\",\r",
									"    \"Nombredelcliente\",\r",
									"    \"Activo\",\r",
									"    \"Celular\",\r",
									"    \"ActividadEconomica\",\r",
									"    \"Ciudad\",\r",
									"    \"Sector\",\r",
									"    \"Tipocliente\",\r",
									"    \"TipoDocIdentidad\",\r",
									"    \"Contacto\",\r",
									"    \"Direccion\",\r",
									"    \"Documento\",\r",
									"    \"Email\",\r",
									"    \"Fax\",\r",
									"    \"FechaActualizacion\",\r",
									"    \"FechaCreacion\",\r",
									"    \"Telefono\",\r",
									"    \"URL\",\r",
									"    \"OrigenRecursos\",\r",
									"    \"CodOrigenRecursos\",\r",
									"    \"SLFCanal\",\r",
									"    \"CodSLFCanal\",\r",
									"    \"CodActividadEconomica\",\r",
									"    \"ScoringSarlaft\",\r",
									"    \"EsNivelGlobal\",\r",
									"    \"Sucursales\"\r",
									"    ]}\r",
									"    \r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/clientes/tipodocumento/5/documento/00242562",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"clientes",
								"tipodocumento",
								"5",
								"documento",
								"00242562"
							]
						}
					},
					"response": []
				},
				{
					"name": "Relación tercero a cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Tercero agregago con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Tercero relacionado agregado correctamente\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"       IdTercero: { type: 'number'},\r",
									"       IdContraparte: {\r",
									"           oneOff: [\r",
									"               { type: 'number'},\r",
									"               { type: 'null'}\r",
									"        ]},\r",
									"        Porcentaje: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        TipoContraparte: {\r",
									"           oneOff: [\r",
									"               { type: 'string'},\r",
									"               { type: 'null'}\r",
									"        ]},\r",
									"        TipoRelacion:  {\r",
									"           oneOff: [\r",
									"               { type: 'number'},\r",
									"               { type: 'null'}\r",
									"        ]},\r",
									"     \r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"     \"IdTercero\",\r",
									"     \"IdContraparte\",\r",
									"     \"Porcentaje\",\r",
									"     \"TipoContraparte\",\r",
									"     \"TipoRelacion\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"IdTercero\": 12,\r\n    \"Porcentaje\": 35,\r\n    \"TipoRelacion\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/clientes/4/Tercero",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"clientes",
								"4",
								"Tercero"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar relación tercero a cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Tercero eliminado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Tercero relacionado eliminado correctamente\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'object',\r",
									"    properties: {\r",
									"    Id_Tercero: { type: 'number'},\r",
									"    CodTipoidentificacion: { type: 'number'},\r",
									"    NomTercero: { type: 'string'},\r",
									"    telefono: { type: 'number'},\r",
									"    Email: { type: 'string'},\r",
									"    Fecha: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        CodUsuario: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NumDocumento: {\r",
									"            type: 'string'\r",
									"        },\r",
									"        RiesgoLaft: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        Descripcion: {\r",
									"            type: 'string'\r",
									"        },\r",
									"        Activo: {\r",
									"            type: 'boolean'\r",
									"        },\r",
									"        FechaScoring:{ \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        CodTipoPersona: { type: 'number' },\r",
									"     \r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"    \"Id_Tercero\",\r",
									"    \"CodTipoidentificacion\",\r",
									"    \"NomTercero\",\r",
									"    \"Telefono\",\r",
									"    \"Email\",\r",
									"    \"Fecha\",\r",
									"    \"CodUsuario\",\r",
									"    \"NumDocumento\",\r",
									"    \"RiesgoLaft\",\r",
									"    \"Descripcion\",\r",
									"    \"Activo\",\r",
									"    \"FechaScoring\",\r",
									"    \"CodTipoPersona\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/api/clientes/4/Tercero/12/TipoRelacion/3",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"clientes",
								"4",
								"Tercero",
								"12",
								"TipoRelacion",
								"3"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "12345",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Ciudad",
			"item": [
				{
					"name": "Obtener Ciudad",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Codigo de estatus es 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Ciudades obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"     type: 'array',\r",
									"      items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdCiudad: { type: 'number'},\r",
									"        NomCiudad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodCiudad:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodDepartamento: { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        IdBasilea:  { \r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NomDepartamento:  { \r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"IdCiudad\",\r",
									"        \"NomCiudad\",\r",
									"        \"CodDepartamento\",\r",
									"        \"NomDepartamento\",\r",
									"        \"CodCiudad\",\r",
									"        \"IdBasilea\"\r",
									"    ]}\r",
									"    }\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/Ciudad/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"Ciudad",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Departamentos",
			"item": [
				{
					"name": "Consulta Departamentos",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Codigo de estatus es 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de departamentos obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"     type: 'array',\r",
									"      items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdDepartamento: { type: 'number'},\r",
									"        NomDepartamento: { type: 'string'},\r",
									"        Pais: { type: 'string'},\r",
									"        CodPais: { type: 'number'},\r",
									"         additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"IdDepartamento\",\r",
									"        \"NomDepartamento\",\r",
									"        \"Pais\",\r",
									"        \"CodPais\"\r",
									"    ]}\r",
									"    }\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{URL}}/api/departamentos/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"departamentos",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Documento",
			"item": [
				{
					"name": "Consulta Documento por ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Codigo de estatus es 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{URL}}/api/documento/2879",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"documento",
								"2879"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incompleto-Consulta Documento por ID URL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Codigo de estatus es 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/documento/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"documento",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Equipo",
			"item": [
				{
					"name": "Buscar equipo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Clientes buscados con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de equipos obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"     type: 'array',\r",
									"      items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"       NomEquipo: { type: 'string'},\r",
									"       MarcaDeEquipo: {\r",
									"           oneOff: [\r",
									"            { type: 'string'},\r",
									"            { type: 'null'}\r",
									"           ]},\r",
									"       TipoDeEquipo: {\r",
									"           oneOff: [\r",
									"            { type: 'string'},\r",
									"            { type: 'null'}\r",
									"           ]},\r",
									"       Modelo: {\r",
									"           oneOff: [\r",
									"            { type: 'string'},\r",
									"            { type: 'null'}\r",
									"           ]},\r",
									"       Descripcion: {\r",
									"           oneOff: [\r",
									"               { type: 'string'},\r",
									"               { type: 'null'}\r",
									"           ]},\r",
									"       Cuidados: {\r",
									"           oneOff: [\r",
									"               { type: 'string'},\r",
									"               { type: 'null'}\r",
									"           ]},\r",
									"       Serial: {\r",
									"           oneOff: [\r",
									"               { type: 'string'},\r",
									"               { type: 'null'}\r",
									"           ]},\r",
									"       Placa: {\r",
									"           oneOff: [\r",
									"               { type: 'string'},\r",
									"               { type: 'null'}\r",
									"           ]},\r",
									"       Localizacion: {\r",
									"           oneOff: [\r",
									"               { type: 'string'},\r",
									"               { type: 'null'}\r",
									"           ]},\r",
									"       Oficina: {\r",
									"           oneOff: [\r",
									"               { type: 'string'},\r",
									"               { type: 'null'}\r",
									"           ]},\r",
									"       Area: {\r",
									"           oneOff: [\r",
									"               { type: 'string'},\r",
									"               { type: 'null'}\r",
									"           ]},\r",
									"        Usuario: {\r",
									"           oneOff: [\r",
									"               { type: 'string'},\r",
									"               { type: 'null'}\r",
									"           ]},\r",
									"        FechaCompra: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"           ]},\r",
									"        CantidadCalibracion: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        RangosDeTiempoCalibracion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CantidadMantenimiento: { type: 'string'},\r",
									"        Activo: {\r",
									"           oneOff: [\r",
									"            { type: 'number'},\r",
									"            { type: 'null'}\r",
									"           ]},\r",
									"        \r",
									"         additionalProperties: false     \r",
									"    },\r",
									"    required: [    \r",
									"       \"NomEquipo\",\r",
									"       \"MarcaDeEquipo\",\r",
									"       \"TipoDeEquipo\",\r",
									"       \"Modelo\",\r",
									"       \"Descripcion\",\r",
									"       \"Cuidados\",\r",
									"       \"Serial\",\r",
									"       \"Placa\",\r",
									"       \"Localizacion\",\r",
									"       \"Oficina\",\r",
									"       \"Area\",\r",
									"       \"Usuario\", \r",
									"       \"FechaCompra\",\r",
									"       \"CantidadCalibracion\",\r",
									"       \"RangosDeTiempoCalibracion\",\r",
									"       \"CantidadMantenimiento\",\r",
									"       \"RangosDeTiempoMantenimiento\",\r",
									"       \"Activo\"\r",
									"    ]}\r",
									"    }\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/equipos/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"equipos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear equipo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"NoEquipo\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.globals.set(\"numero\", pm.variables.replaceIn('{{$randomInt}}'));\r",
									"pm.globals.set(\"telefono\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Equipo creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Equipo ha sido creado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        NomEquipo: { type: 'string'},\r",
									"        MarcaDeEquipo: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TipoDeEquipo: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Modelo: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Descripcion:{\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Cuidados: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Serial: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Placa: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Localizacion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Oficina: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Area: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Usuario: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        FechaCompra: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"           ]},\r",
									"        CantidadCalibracion: {\r",
									"            oneOff: [\r",
									"                { type: 'null'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        RangosDeTiempoCalibracion: {\r",
									"            oneOff: [\r",
									"                { type: 'null'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        CantidadMantenimiento: {\r",
									"            oneOff: [\r",
									"                { type: 'null'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        RangosDeTiempoMantenimiento: {\r",
									"            oneOff: [\r",
									"                { type: 'null'},\r",
									"                { type: 'string'}\r",
									"            ]},\r",
									"        Activo: {\r",
									"            oneOff: [\r",
									"                { type: 'boleean'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"        \r",
									"    },\r",
									"    required: [    \r",
									"        \"NomEquipo\",\r",
									"        \"MarcaDeEquipo\",\r",
									"        \"TipoDeEquipo\",\r",
									"        \"Modelo\",\r",
									"        \"Descripcion\",\r",
									"        \"Cuidados\",\r",
									"        \"Serial\",\r",
									"        \"Placa\",\r",
									"        \"Localizacion\",\r",
									"        \"Oficina\",\r",
									"        \"Usuario\",\r",
									"        \"FechaCompra\",\r",
									"        \"CantidadCalibracion\",\r",
									"        \"RangosDeTiempoCalibracion\",\r",
									"        \"CantidadMantenimiento\",\r",
									"        \"RangosDeTiempoMantenimiento\",\r",
									"        \"Activo\"\r",
									"    ]}\r",
									"    \r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NomEquipo\":\"{{NoEquipo}}\",\r\n\"Modelo\":\"{{telefono}}\",\r\n\"Descripcion\":\"\",\r\n\"Cuidados\":\"\",\r\n\"Serial\":\"\",\r\n\"Placa\":\"EQ-2101\",\r\n\"Localizacion\":\"\",\r\n\"Oficina\":null,\r\n\"Usuario\":\"admin\",\r\n\"FechaCompra\":null,\r\n\"CantidadCalibracion\":\"\",\r\n\"CantidadMantenimiento\":\"\",\r\n\"Activo\":1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/equipos/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"equipos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar equipos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Equipo editado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Equipo ha sido actualizado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        NomEquipo: { type: 'string'},\r",
									"        MarcaDeEquipo: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TipoDeEquipo: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Modelo: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Descripcion:{\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Cuidados: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Serial: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Placa: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Localizacion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Oficina: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Area: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        Usuario: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        FechaCompra: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"           ]},\r",
									"        CantidadCalibracion: {\r",
									"            oneOff: [\r",
									"                { type: 'null'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        RangosDeTiempoCalibracion: {\r",
									"            oneOff: [\r",
									"                { type: 'null'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        CantidadMantenimiento: {\r",
									"            oneOff: [\r",
									"                { type: 'null'},\r",
									"                { type: 'number'}\r",
									"            ]},\r",
									"        RangosDeTiempoMantenimiento: {\r",
									"            oneOff: [\r",
									"                { type: 'null'},\r",
									"                { type: 'string'}\r",
									"            ]},\r",
									"        Activo: {\r",
									"            oneOff: [\r",
									"                { type: 'boleean'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"        \r",
									"    },\r",
									"    required: [    \r",
									"        \"NomEquipo\",\r",
									"        \"MarcaDeEquipo\",\r",
									"        \"TipoDeEquipo\",\r",
									"        \"Modelo\",\r",
									"        \"Descripcion\",\r",
									"        \"Cuidados\",\r",
									"        \"Serial\",\r",
									"        \"Placa\",\r",
									"        \"Localizacion\",\r",
									"        \"Oficina\",\r",
									"        \"Usuario\",\r",
									"        \"FechaCompra\",\r",
									"        \"CantidadCalibracion\",\r",
									"        \"RangosDeTiempoCalibracion\",\r",
									"        \"CantidadMantenimiento\",\r",
									"        \"RangosDeTiempoMantenimiento\",\r",
									"        \"Activo\"\r",
									"    ]}\r",
									"    \r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NomEquipo\":\"{{NoEquipo}}\",\r\n\"Modelo\":\"{{telefono}}\",\r\n\"Descripcion\":\"abc nueva Descripcion\",\r\n\"Cuidados\":\"\",\r\n\"Serial\":\"\",\r\n\"Placa\":\"EQ-2101\",\r\n\"Localizacion\":\"\",\r\n\"Oficina\":null,\r\n\"Usuario\":\"admin\",\r\n\"FechaCompra\":\"2022-08-14\",\r\n\"CantidadCalibracion\":\"1\",\r\n\"CantidadMantenimiento\":\"1\",\r\n\"Activo\":null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/equipos/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"equipos",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "12345",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Familia",
			"item": [
				{
					"name": "Obtener Familia",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Codigo de estatus es 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de familias obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        id_Familia: { type: 'number'},\r",
									"        nomFamilia: { type: 'string'},\r",
									"         additionalProperties: false\r",
									"        \r",
									"    },\r",
									"    required: [    \r",
									"        \"id_Familia\",\r",
									"        \"nomFamilia\"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{URL}}/api/familia/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"familia",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Furat",
			"item": [
				{
					"name": "Obtener Furat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de Furat traida corectamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Accidente de Trabajo obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        CausoMuerte: { type: 'number'},\r",
									"        CodActividadEconomicaPersona: { type: 'number'},\r",
									"        Municipiodelaenfermedad: { type: 'string'},\r",
									"        NombreFuncionario: {type: 'string'},\r",
									"        DescripcionAccidente: {type: 'string'},\r",
									"        FechaAccidente: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"           ]},\r",
									"        FuncionarioSalario: { type: 'number'},\r",
									"        Hora: { type: 'number'},\r",
									"        LaborHabitual: { type: 'number'},\r",
									"        HoraLaborada: { type: 'number'},\r",
									"        MecanismoOtro: { type: 'string'},\r",
									"        Minuto: { type: 'number'},\r",
									"        MinutoLaborado: { type: 'number'},\r",
									"        OcupacionActualNumeroDias: { type: 'number'},\r",
									"        OtraLabor: {\r",
									"            oneOff: [\r",
									"                { type: 'null'},\r",
									"                { type: 'string'}\r",
									"            ]},\r",
									"        PresenciaronAccidente: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"        \r",
									"    },\r",
									"    required: [    \r",
									"      \"CausoMuerte\",\r",
									"      \"CodActividadEconomicaPersona\",\r",
									"      \"Municipiodelaenfermedad\",\r",
									"      \"NombreFuncionario\",\r",
									"      \"DescripcionAccidente\",\r",
									"      \"FechaAccidente\",\r",
									"      \"FuncionarioSalario\",\r",
									"      \"Hora\",\r",
									"      \"LaborHabitual\",\r",
									"      \"HoraLaborada\",\r",
									"      \"MecanismoOtro\",\r",
									"      \"Minuto\",\r",
									"      \"MinutoLaborado\",\r",
									"      \"OcupacionActualNumeroDias\",\r",
									"      \"OtraLabor\",\r",
									"      \"PresenciaronAccidente\",\r",
									"      \"SitioAccidenteOtro\"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/furat/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"furat",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear Furat",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"var fechaiso8601 = 'YYYY-MM-DDTHH:mm:ss';\r",
									"var fechaactual = moment().format(fechaiso8601);\r",
									"pm.environment.set(\"FechaAccidente\", fechaactual);\r",
									"pm.globals.set(\"FechaAccidente\", fechaactual);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Furat creado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El registro de Accidente Laboral ha sido creado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        CausoMuerte: { type: 'number'},\r",
									"        CodActividadEconomicaPersona: { type: 'number'},\r",
									"        Municipiodelaenfermedad: { type: 'string'},\r",
									"        NombreFuncionario: {type: 'string'},\r",
									"        DescripcionAccidente: {type: 'string'},\r",
									"        FechaAccidente: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"           ]},\r",
									"        FuncionarioSalario: { type: 'number'},\r",
									"        Hora: { type: 'number'},\r",
									"        LaborHabitual: { type: 'number'},\r",
									"        HoraLaborada: { type: 'number'},\r",
									"        MecanismoOtro: { type: 'string'},\r",
									"        Minuto: { type: 'number'},\r",
									"        MinutoLaborado: { type: 'number'},\r",
									"        OcupacionActualNumeroDias: { type: 'number'},\r",
									"        OtraLabor: {\r",
									"            oneOff: [\r",
									"                { type: 'null'},\r",
									"                { type: 'string'}\r",
									"            ]},\r",
									"        PresenciaronAccidente: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"        \r",
									"    },\r",
									"    required: [    \r",
									"      \"CausoMuerte\",\r",
									"      \"CodActividadEconomicaPersona\",\r",
									"      \"Municipiodelaenfermedad\",\r",
									"      \"NombreFuncionario\",\r",
									"      \"DescripcionAccidente\",\r",
									"      \"FechaAccidente\",\r",
									"      \"FuncionarioSalario\",\r",
									"      \"Hora\",\r",
									"      \"LaborHabitual\",\r",
									"      \"HoraLaborada\",\r",
									"      \"MecanismoOtro\",\r",
									"      \"Minuto\",\r",
									"      \"MinutoLaborado\",\r",
									"      \"OcupacionActualNumeroDias\",\r",
									"      \"OtraLabor\",\r",
									"      \"PresenciaronAccidente\",\r",
									"      \"SitioAccidenteOtro\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NombreFuncionario\":\"{{Nombre}}\",\r\n\"FechaAccidente\":\"{{FechaAccidente}}\",\r\n\"Municipiodelaenfermedad\":\"ACEVEDO\",\r\n\"CodActividadEconomicaPersona\":8,\r\n\"CausoMuerte\":0,\r\n\"HoraAccidente\":3,\r\n\"Minuto\":3,\r\n\"HoraLaborada\":11,\r\n\"MinutoLaborado\":11,\r\n\"LaborHabitual\":1,\r\n\"MecanismoOtro\":\"N.A.\",\r\n\"DescripcionAccidente\":\"11/ene./2018\",\r\n\"FuncionarioSalario\":2500000.00,\r\n\"OcupacionActualNumeroDias\":2,\r\n\"OtraLabor\":\"\",\r\n\"PresenciaronAccidente\":1,\r\n\"SitioAccidenteOtro\":\"N.A.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/furat/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"furat",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar Furat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Furat editado con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El registro de Accidente Laboral ha sido actualizado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        CausoMuerte: { type: 'number'},\r",
									"        CodActividadEconomicaPersona: { type: 'number'},\r",
									"        Municipiodelaenfermedad: { type: 'string'},\r",
									"        NombreFuncionario: {type: 'string'},\r",
									"        DescripcionAccidente: {type: 'string'},\r",
									"        FechaAccidente: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: \"null\"}\r",
									"           ]},\r",
									"        FuncionarioSalario: { type: 'number'},\r",
									"        Hora: { type: 'number'},\r",
									"        LaborHabitual: { type: 'number'},\r",
									"        HoraLaborada: { type: 'number'},\r",
									"        MecanismoOtro: { type: 'string'},\r",
									"        Minuto: { type: 'number'},\r",
									"        MinutoLaborado: { type: 'number'},\r",
									"        OcupacionActualNumeroDias: { type: 'number'},\r",
									"        OtraLabor: {\r",
									"            oneOff: [\r",
									"                { type: 'null'},\r",
									"                { type: 'string'}\r",
									"            ]},\r",
									"        PresenciaronAccidente: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"         additionalProperties: false\r",
									"        \r",
									"    },\r",
									"    required: [    \r",
									"      \"CausoMuerte\",\r",
									"      \"CodActividadEconomicaPersona\",\r",
									"      \"Municipiodelaenfermedad\",\r",
									"      \"NombreFuncionario\",\r",
									"      \"DescripcionAccidente\",\r",
									"      \"FechaAccidente\",\r",
									"      \"FuncionarioSalario\",\r",
									"      \"Hora\",\r",
									"      \"LaborHabitual\",\r",
									"      \"HoraLaborada\",\r",
									"      \"MecanismoOtro\",\r",
									"      \"Minuto\",\r",
									"      \"MinutoLaborado\",\r",
									"      \"OcupacionActualNumeroDias\",\r",
									"      \"OtraLabor\",\r",
									"      \"PresenciaronAccidente\",\r",
									"      \"SitioAccidenteOtro\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"NombreFuncionario\":\"{{Nombre}}\",\r\n\"FechaAccidente\":\"{{FechaAccidente}}\",\r\n\"Municipiodelaenfermedad\":\"ACEVEDO\",\r\n\"CodActividadEconomicaPersona\":8,\r\n\"CausoMuerte\":0,\r\n\"HoraAccidente\":3,\r\n\"Minuto\":3,\r\n\"HoraLaborada\":11,\r\n\"MinutoLaborado\":11,\r\n\"LaborHabitual\":1,\r\n\"MecanismoOtro\":\"N.A.\",\r\n\"DescripcionAccidente\":\"11/ene./2018\",\r\n\"FuncionarioSalario\":2500000.00,\r\n\"OcupacionActualNumeroDias\":2,\r\n\"OtraLabor\":\"sdasdasd\",\r\n\"PresenciaronAccidente\":1,\r\n\"SitioAccidenteOtro\":\"N.A.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/furat/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"furat",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "12345",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Productos",
			"item": [
				{
					"name": "Obtener Lista de Productos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de productos obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdProducto: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        IdProceso: {\r",
									"            type: 'number'\r",
									"        },\r",
									"        NomProducto: {\r",
									"            type: 'string'\r",
									"        },\r",
									"         additionalProperties: false\r",
									"        \r",
									"    },\r",
									"    required: [    \r",
									"        \"IdProducto\",\r",
									"        \"IdProceso\",\r",
									"        \"NomProducto\"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/Producto/?RegistroActual=0&TamanoPagina=20",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"Producto",
								""
							],
							"query": [
								{
									"key": "RegistroActual",
									"value": "0"
								},
								{
									"key": "TamanoPagina",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener Lista de Productos por Proceso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de productos obtenida exitosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de procesos obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"     IdProceso: { type: 'number'},\r",
									"     NomProceso: { type: 'string'},\r",
									"     Sigla: {\r",
									"         oneOff: [\r",
									"            { type: 'string'},\r",
									"            { type: 'null'}\r",
									"         ]},   \r",
									"     Activo: { type: 'number'},\r",
									"         additionalProperties: false\r",
									"        \r",
									"    },\r",
									"    required: [    \r",
									"     \"IdProceso\",\r",
									"     \"NomProceso\",\r",
									"     \"Sigla\",\r",
									"     \"Activo\"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/procesos/?RegistroActual=0&TamanoPagina=20",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"procesos",
								""
							],
							"query": [
								{
									"key": "RegistroActual",
									"value": "0"
								},
								{
									"key": "TamanoPagina",
									"value": "20"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Roles de Usuario",
			"item": [
				{
					"name": "Obtener roles de Usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de Sucursal Accion obtenida exitosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Roles obtenidos exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_Usuario: { type: 'number'},\r",
									"        EsJefe: { type: 'number'},\r",
									"        EsAdmin: { type: 'number'},\r",
									"        EsCalidad: { type: 'number'},\r",
									"        EsEvaluador: { type: 'number'},\r",
									"        EsFuncionario:{ type: 'number'},\r",
									"        EsConsulta: { type: 'number'},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"Id_Usuario\",\r",
									"        \"EsJefe\",\r",
									"        \"EsAdmin\",\r",
									"        \"EsAuditor\",\r",
									"        \"EsCalidad\",\r",
									"        \"EsEvaluador\",\r",
									"        \"EsFuncionario\",\r",
									"        \"EsConsulta\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/rolUsuario/3",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"rolUsuario",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Roles actualizados exitosamente.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.StatusCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Roles actualizados exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_Usuario: { type: 'number'},\r",
									"        EsJefe: { type: 'number'},\r",
									"        EsAdmin: { type: 'number'},\r",
									"        EsCalidad: { type: 'number'},\r",
									"        EsEvaluador: { type: 'number'},\r",
									"        EsFuncionario:{ type: 'number'},\r",
									"        EsConsulta: { type: 'number'},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"Id_Usuario\",\r",
									"        \"EsJefe\",\r",
									"        \"EsAdmin\",\r",
									"        \"EsAuditor\",\r",
									"        \"EsCalidad\",\r",
									"        \"EsEvaluador\",\r",
									"        \"EsFuncionario\",\r",
									"        \"EsConsulta\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Id_Usuario\":3,\r\n    \"EsJefe\":\"1\",\r\n    \"EsAdmin\":\"1\",\r\n    \"EsAuditor\":\"1\",\r\n    \"EsCalidad\":\"1\",\r\n    \"EsEvaluador\":\"1\",\r\n    \"EsConsulta\":\"1\",\r\n    \"EsFuncionario\":\"1\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/rolusuario",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"rolusuario"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tercero",
			"item": [
				{
					"name": "Buscar un Tercero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Se puede buscar un tercero\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de terceros obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_Tercero: { type: 'number'},\r",
									"        Id_TerceroAcept: { type: 'number'},\r",
									"        IdContraparte: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NomTercero: { type: 'string'},\r",
									"        TipoPersona: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoDeRelacion: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        RiesgoLaft: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Descripcion: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoIdentificacion: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LabelTipoDeRelacion: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LabelTipoDeRelacion: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NumeroIdentificacion: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        UsuarioCreador: { type: 'number'},\r",
									"        Porcentaje: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TipoContraparte: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoPersona: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LabelRiesgoLAft: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LabelPorcentaje: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        AplicaPorcentaje: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fecha: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]}, \r",
									"        CodUsuario: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo: { type: 'boolean'},\r",
									"        LabelTipoPersona: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"Id_Tercero\",\r",
									"        \"Id_TerceroAcept\",\r",
									"        \"IdContraparte\",\r",
									"        \"NomTercero\",\r",
									"        \"TipoPersona\",\r",
									"        \"CodTipoDeRelacion\",\r",
									"        \"RiesgoLaft\",\r",
									"        \"Descripcion\",\r",
									"        \"CodTipoIdentificacion\",\r",
									"        \"LabelTipoIdentificacion\",\r",
									"        \"LabelTipoDeRelacion\",\r",
									"        \"NumeroIdentificacion\",\r",
									"        \"UsuarioCreador\",\r",
									"        \"Porcentaje\",\r",
									"        \"TipoContraparte\",\r",
									"        \"Email\",\r",
									"        \"Telefono\",\r",
									"        \"CodTipoPersona\",\r",
									"        \"LabelRiesgoLAft\",\r",
									"        \"LabelPorcentaje\",\r",
									"        \"AplicaPorcentaje\",\r",
									"        \"Fecha\",\r",
									"        \"CodUsuario\",\r",
									"        \"Activo\",\r",
									"        \"LabelTipoPersona\"\r",
									"    ]}\r",
									"}\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/terceros/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"terceros",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear un tercero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"tercero creado exitosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El tercero  ha sido creado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_Tercero: { type: 'number'},\r",
									"        Id_TerceroAcept: { type: 'number'},\r",
									"        IdContraparte: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NomTercero: { type: 'string'},\r",
									"        TipoPersona: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoDeRelacion: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        RiesgoLaft: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Descripcion: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoIdentificacion: { type: 'number'},\r",
									"        LabelTipoDeRelacion: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LabelTipoDeRelacion: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NumeroIdentificacion: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        UsuarioCreador: { type: 'number'},\r",
									"        Porcentaje: { type: 'number'},\r",
									"        TipoContraparte: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoPersona: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LabelRiesgoLAft: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LabelPorcentaje: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        AplicaPorcentaje: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fecha: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]}, \r",
									"        CodUsuario: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo: { type: 'boolean'},\r",
									"        LabelTipoPersona: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"Id_Tercero\",\r",
									"        \"Id_TerceroAcept\",\r",
									"        \"IdContraparte\",\r",
									"        \"NomTercero\",\r",
									"        \"TipoPersona\",\r",
									"        \"CodTipoDeRelacion\",\r",
									"        \"RiesgoLaft\",\r",
									"        \"Descripcion\",\r",
									"        \"CodTipoIdentificacion\",\r",
									"        \"LabelTipoIdentificacion\",\r",
									"        \"LabelTipoDeRelacion\",\r",
									"        \"NumeroIdentificacion\",\r",
									"        \"UsuarioCreador\",\r",
									"        \"Porcentaje\",\r",
									"        \"TipoContraparte\",\r",
									"        \"Email\",\r",
									"        \"Telefono\",\r",
									"        \"CodTipoPersona\",\r",
									"        \"LabelRiesgoLAft\",\r",
									"        \"LabelPorcentaje\",\r",
									"        \"AplicaPorcentaje\",\r",
									"        \"Fecha\",\r",
									"        \"CodUsuario\",\r",
									"        \"Activo\",\r",
									"        \"LabelTipoPersona\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"NomTercero\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.globals.set(\"Identificacion\", pm.variables.replaceIn('{{$randomBankAccount}}'));\r",
									"pm.globals.set(\"telefono\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"pm.globals.set(\"Descripcion\", pm.variables.replaceIn('{{$randomLoremSentences}}'));\r",
									"pm.globals.set(\"Email\", pm.variables.replaceIn('{{$randomExampleEmail}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n \"NomTercero\": \"{{NomTercero}}\",\r\n \"NumeroIdentificacion\": \"{{Identificacion}}\",\r\n \"CodTipoidentificacion\": 1,\r\n \"Telefono\": \"{{$randomPhoneNumber}}\",\r\n \"Email\": \"{{$randomExampleEmail}}\",                          \r\n \"Descripcion\": \"{{$randomLoremSentences}}\",\r\n \"Porcentaje\":17,\r\n \"Activo\": 1,\r\n \"CodTipoPersona\":2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/terceros",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"terceros"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar un tercero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Se pudo traer el usuario\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"El Tercero ha sido actualizado exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_Tercero: { type: 'number'},\r",
									"        Id_TerceroAcept: { type: 'number'},\r",
									"        IdContraparte: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NomTercero: { type: 'string'},\r",
									"        TipoPersona: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoDeRelacion: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        RiesgoLaft: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Descripcion: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoIdentificacion: { type: 'number'},\r",
									"        LabelTipoDeRelacion: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LabelTipoDeRelacion: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        NumeroIdentificacion: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        UsuarioCreador: { type: 'number'},\r",
									"        Porcentaje: { type: 'number'},\r",
									"        TipoContraparte: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Email: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Telefono: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodTipoPersona: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LabelRiesgoLAft: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LabelPorcentaje: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        AplicaPorcentaje: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Fecha: { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]}, \r",
									"        CodUsuario: {\r",
									"            oneOff: [\r",
									"                { type: 'number' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Activo: { type: 'boolean'},\r",
									"        LabelTipoPersona: {\r",
									"            oneOff: [\r",
									"                { type: 'string' },\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"Id_Tercero\",\r",
									"        \"Id_TerceroAcept\",\r",
									"        \"IdContraparte\",\r",
									"        \"NomTercero\",\r",
									"        \"TipoPersona\",\r",
									"        \"CodTipoDeRelacion\",\r",
									"        \"RiesgoLaft\",\r",
									"        \"Descripcion\",\r",
									"        \"CodTipoIdentificacion\",\r",
									"        \"LabelTipoIdentificacion\",\r",
									"        \"LabelTipoDeRelacion\",\r",
									"        \"NumeroIdentificacion\",\r",
									"        \"UsuarioCreador\",\r",
									"        \"Porcentaje\",\r",
									"        \"TipoContraparte\",\r",
									"        \"Email\",\r",
									"        \"Telefono\",\r",
									"        \"CodTipoPersona\",\r",
									"        \"LabelRiesgoLAft\",\r",
									"        \"LabelPorcentaje\",\r",
									"        \"AplicaPorcentaje\",\r",
									"        \"Fecha\",\r",
									"        \"CodUsuario\",\r",
									"        \"Activo\",\r",
									"        \"LabelTipoPersona\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "apiKey",
								"value": "00b3a3e17f-05da-42d8-a051-9aafd33dc2b2-QA.isolucion.co",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n \"NomTercero\": \"{{NomTercero}}\",\r\n \"NumeroIdentificacion\": \"{{Identificacion}}\",\r\n \"CodTipoidentificacion\": 1,\r\n \"Telefono\": \"{{$randomPhoneNumber}}\",\r\n \"Email\": \"{{$randomExampleEmail}}\",                          \r\n \"Descripcion\": \"{{$randomLoremSentences}}\",\r\n \"Porcentaje\":17,\r\n \"Activo\": 1,\r\n \"CodTipoPersona\":2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/terceros",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"terceros"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Registros",
			"item": [
				{
					"name": "Crear un registro",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"Descripcion\", pm.variables.replaceIn('{{$randomLoremSentences}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de Sucursal Accion obtenida exitosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Registros creados exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_ArchivoAnexo: { type: 'number'},\r",
									"        NomArchivoAnexo: { type: 'string'},\r",
									"        Url: { type: 'string'},\r",
									"        ExtensionFormato: { type: 'string'},\r",
									"        Fecha:  { \r",
									"            oneOff: [\r",
									"               { type: \"string\",\r",
									"                   format: \"data-time\",\r",
									"                   pattern: \"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$\"\r",
									"                },\r",
									"                { type: \"intenger\"},\r",
									"                { type: 'null'}\r",
									"           ]},\r",
									"        CodResponsableUpload: { type: 'number'},\r",
									"        Objeto: { type: 'string'},\r",
									"        Sigla: { type: 'string'},\r",
									"        Descripcion: { type: 'string'},\r",
									"        Tamano: { type: 'number'},\r",
									"        RutaFisica: { type: 'string'},\r",
									"        OrigenRegistro: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ResponsableUpload: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ResponsableArchivar: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Proceso: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Version: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]}, \r",
									"        LugarAlmacenamiento: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        AprobadoPor: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CdfCodigo: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CdfSecuencial: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CdfPlantilla: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        RetencionTiempo: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        RetencionDisposicion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Temp: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        IdObjeto: { type: 'number'},\r",
									"        IdSigla: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        EsNivelGlobal: { type: 'number'},\r",
									"        Cod_Codigo: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Codigo: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Proteccion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Recuperacion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Lov_Phva: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Lov_Phva: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LovMultiple_Phva: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Cod_Secuencial: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ProcesoJerarquico: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]}, \r",
									"        Archiva: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LugarAlmacenamiento: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LovVarios_Phva: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LovMultiple_Phva: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Cod_Secuencial: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        ProcesoJerarquico: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Archiva: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LugarDeAlmacenamiento: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Disposicion: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        CodProceso: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        DisposiciónFinal: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        DondeSeConserva: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        MedioDeConservación: {\r",
									"            oneOff: [\r",
									"                { type: 'string'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        Popup_cargo: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TiempoDeConservaciónFinalARC: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        TiempoDeConservaciónInicial: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        COD_Plantilla: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        LOV_ClasificacionInformacion: {\r",
									"            oneOff: [\r",
									"                { type: 'number'},\r",
									"                { type: 'null'}\r",
									"            ]},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [         \r",
									"        \"Id_ArchivoAnexo\",\r",
									"        \"NomArchivoAnexo\",\r",
									"        \"Url\",\r",
									"        \"ExtensionFormato\",\r",
									"        \"Fecha\",\r",
									"        \"CodResponsableUpload\",\r",
									"        \"Objeto\",\r",
									"        \"Sigla\",\r",
									"        \"Descripcion\",\r",
									"        \"Tamano\",\r",
									"        \"RutaFisica\",\r",
									"        \"OrigenRegistro\",\r",
									"        \"ResponsableUpload\",\r",
									"        \"ResponsableArchivar\",\r",
									"        \"Proceso\",\r",
									"        \"Version\",\r",
									"        \"LugarAlmacenamiento\",\r",
									"        \"AprobadoPor\",\r",
									"        \"CdfCodigo\",\r",
									"        \"CdfSecuencial\",\r",
									"        \"CdfPlantilla\",\r",
									"        \"RetencionTiempo\",\r",
									"        \"RetencionDisposicion\",\r",
									"        \"Temp\",\r",
									"        \"IdObjeto\",\r",
									"        \"IdSigla\",\r",
									"        \"EsNivelGlobal\",\r",
									"        \"Cod_Codigo\",\r",
									"        \"Codigo\",\r",
									"        \"Proteccion\",\r",
									"        \"Recuperacion\",\r",
									"        \"Lov_Phva\",\r",
									"        \"LovVarios_Phva\",\r",
									"        \"LovMultiple_Phva\",\r",
									"        \"Cod_Secuencial\",\r",
									"        \"ProcesoJerarquico\",\r",
									"        \"Archiva\",\r",
									"        \"LugarDeAlmacenamiento\",\r",
									"        \"Disposicion\",\r",
									"        \"CodProceso\",\r",
									"        \"DisposiciónFinal\",\r",
									"        \"DondeSeConserva\",\r",
									"        \"MedioDeConservación\",\r",
									"        \"Popup_cargo\",\r",
									"        \"TiempoDeConservaciónFinalARC\",\r",
									"        \"TiempoDeConservaciónInicial\",\r",
									"        \"COD_Plantilla\",\r",
									"        \"LOV_ClasificacionInformacion\"\r",
									"    ]}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"Archivo\":\"\",\r\n\"Nombre\":\"{{NomAccionista}}\",\r\n\"Extension\":\"docx\",\r\n\"Descripcion\":\"Archivo subido desde postman\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/registros/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"registros",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Sucursales",
			"item": [
				{
					"name": "Obtener la lista de Sucursales",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de Sucursal Accion obtenida exitosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Sucursales obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdSucursal: { type: 'number'},\r",
									"        NomSucursal: { type: 'string'},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"IdSucursal\",\r",
									"        \"NomSucursal\"\r",
									"    ]}\r",
									"}\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/Sucursal/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"Sucursal",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tipo Accion",
			"item": [
				{
					"name": "Obtiene la lista de Tipo Accion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de Tipo Accion obtenida exitosamente.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Tipos de Acción obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"     items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdTipoAccion: { type: 'number'},\r",
									"        NomTipoAccion: { type: 'string'},\r",
									"        EsPreventiva: { type: 'number'},\r",
									"        EsNoConformidad: { type: 'number'},\r",
									"        Activo: { type: 'number'},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"IdTipoAccion\",\r",
									"        \"NomTipoAccion\",\r",
									"        \"EsPreventiva\",\r",
									"        \"EsNoConformidad\",\r",
									"        \"Activo\"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/TipoAccion/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"TipoAccion",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tipo de Relacion",
			"item": [
				{
					"name": "Obtiene la lista de Tipos de Relacion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de tipo de relación obtenida exitosamente.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de tipo de relación obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"        items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"       Id_TipoDeRelacion: { type: 'number'},\r",
									"       NomTipoDeRelacion: { type: 'string'},\r",
									"       CapturaPorcentaje: { type: 'boolean'},\r",
									"       AplicaPersonasNaturales: { type: 'boolean'},\r",
									"       SystemProtected: { type: 'boolean'},\r",
									"       ACTIVO: { type: 'boolean'},\r",
									"       additionalProperties: false\r",
									"           },\r",
									"    required: [           \r",
									"    \"Id_TipoDeRelacion\",\r",
									"    \"NomTipoDeRelacion\",\r",
									"    \"CapturaPorcentaje\",\r",
									"    \"AplicaPersonasNaturales\",\r",
									"    \"SystemProtected\",\r",
									"    \"ACTIVO\"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/tipoderelacion/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"tipoderelacion",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tipo de Documento",
			"item": [
				{
					"name": "Obtiene la lista de Tipos de Documento",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de Tipos de documentos obtenida exitosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Tipos de documento\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"        items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"       IdTipoDocIdentidad: { type: 'number'},\r",
									"       NomTipoDocIdentidad: { type: 'string'},\r",
									"       additionalProperties: false\r",
									"       \r",
									"           },\r",
									"    required: [           \r",
									"    \"IdTipoDocIdentidad\",\r",
									"    \"NomTipoDocIdentidad\"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/TipoDocumento/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"TipoDocumento",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tipo Identificacion",
			"item": [
				{
					"name": "obtener identificacion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de Tipos de documentos obtenida exitosamente\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de Tipos de identificación\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"        items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdTipoIdentificacion: { type: 'number'},\r",
									"        NomTipoIdentificacion: { type: 'string'},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"IdTipoIdentificacion\",\r",
									"        \"NomTipoIdentificacion\"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/TipoIdentificacion/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"TipoIdentificacion",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tipo Persona",
			"item": [
				{
					"name": "Obtiene la lista tipo de persona",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de tipo de personas obtenida exitosamente.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de tipo de personas obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"        items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        IdTipoPersona: { type: 'number'},\r",
									"        NomTipoPersona: { type: 'string'},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"IdTipoPersona\",\r",
									"        \"NomTipoPersona\"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/tipopersona/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"tipopersona",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SLF Canal",
			"item": [
				{
					"name": "SLF Canal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lista de funcionarios obtenida con exito\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Limite de tiempo para la prueba\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de canales obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {\r",
									"        Id_SLFCanal: { type: 'number'},\r",
									"        NomSLFCanal: { type: 'string'},\r",
									"        Activo: { type: 'number'},\r",
									"        CodSLFContrapartes: { type: 'number'},\r",
									"        IdRiesgoExterno: { type: 'number'},\r",
									"         additionalProperties: false\r",
									"        \r",
									"    },\r",
									"    required: [    \r",
									"     \"Id_SLFCanal\",\r",
									"     \"NomSLFCanal\",\r",
									"     \"Activo\",\r",
									"     \"CodSLFContrapartes\",\r",
									"     \"IdRiesgoExterno\"\r",
									"    ]}\r",
									"}\r",
									"\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/SLFCanal/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"SLFCanal",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Grupo Usuario Vista",
			"item": [
				{
					"name": "Obtener  grupo usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Se pudo traer el usuario\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 420000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(420000);\r",
									"});\r",
									"\r",
									"const jsonBody = pm.response.json()\r",
									"\r",
									"pm.test(\"El mensaje a sido validado con exito\",() => {\r",
									"pm.expect(jsonBody.Message).to.equals(\"Lista de grupos obtenida exitosamente.\")\r",
									"})\r",
									"\r",
									"const responseSchema = {\r",
									"    type: 'array',\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"    properties: {       \r",
									"        IdGrupo: { type: 'number'},\r",
									"        NomGrupo: { type: 'string'},\r",
									"        Descripcion: { type: 'string'},\r",
									"        additionalProperties: false\r",
									"    },\r",
									"    required: [    \r",
									"        \"IdGrupo\",\r",
									"        \"NomGrupo\",\r",
									"        \"Descripcion\",\r",
									"    ]}\r",
									"}\r",
									"pm.test('La respuesta conincide con el esquema', ()  => {\r",
									"    pm.expect(JSON.parse(jsonBody.Entity)).to.have.jsonSchema(responseSchema)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/api/grupousuario/1",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"grupousuario",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}